/**
* CheckBox custom element.
*/
JQX('jqx-check-box', class CheckBox extends JQX.ToggleButton {
    // CheckBox's properties.
    static get properties() {
        return {
            'enableContainerClick': {
                value: false,
                type: 'boolean'
            }
        };
    }

    /** CheckBox's Html template. */
    template() {
        return `<div id='container' class='jqx-container'>
                 <div id='checkBoxAnimation' class ='jqx-animation'></div>
                 <span id='checkBoxInput' class ='jqx-input'></span>
                 <span id='checkBoxLabel' inner-h-t-m-l='[[innerHTML]]' class ='jqx-label'><content></content></span>
                 <input id='hiddenInput' class ='jqx-hidden-input' type='hidden'>
               </div>`;
    }

    static get listeners() {
        return {
            'down': '_downHandler',
            'document.up': '_documentUpHandler'
        };
    }

    /** Called when the element is ready. Used for one-time configuration of the CheckBox. */
    ready() {
        const that = this;

        super.ready();

        if (that.indeterminate) {
            that._valueCashe = that.checked;
            that.checked = null;
        }

        that._updateHidenInputNameAndValue();
    }

    /**
  * Updates CheckBox when a property is changed.
  * @param {string} propertyName The name of the property.
  * @param {number/string} oldValue The previously entered value.
  * @param {number/string} newValue The new entered value.
  */
    propertyChangedHandler(propertyName, oldValue, newValue) {
        super.propertyChangedHandler(propertyName, oldValue, newValue);

        const that = this;

        that._updateContentProperties();

        switch (propertyName) {
            case 'indeterminate':
                if (newValue) {
                    that._valueCashe = that.checked;
                    that.checked = null;
                }
                else {
                    that.checked = that._valueCashe;
                }
                that._updateHidenInputNameAndValue();
                break;
            case 'value':
                that._updateHidenInputNameAndValue();
                break;
            case 'checked':
                that._updateHidenInputNameAndValue();
                break;
            case 'name':
                that._updateHidenInputName();
                break;
        }
    }

    /** Changes the check state on click. */
    _documentUpHandler(event) {
        const that = this;

        if (!that._pressed) {
            return;
        }

        that._pressed = false;

        if (that.disabled || that.readonly || (!that.enableContainerClick && event.originalEvent.target !== that.$.checkBoxInput)) {
            return;
        }

        if (that.clickMode === 'press') {
            event.preventDefault();
            event.stopPropagation();
            return;
        }

        that._changeCheckState('pointer');
        that.focus();
        that._handleTextSelection();
        that._updateHidenInputNameAndValue();
    }

    /** Changes the check state on mouse down. */
    _downHandler(event) {
        const that = this,
            target = event.originalEvent.target;

        if (that.disabled || that.readonly) {
            return;
        }

        if (!that.enableContainerClick && target !== that.$.checkBoxInput) {
            return;
        }

        if (that.theme.indexOf('material') > -1) {
            const rect = that.$.checkBoxInput.getBoundingClientRect(),
                windowScrollX = window.scrollX || window.pageXOffset,
                windowScrollY = window.scrollY || window.pageYOffset;

            JQX.Utilities.Animation.Ripple.animate(that.$.checkBoxInput, rect.left + rect.width / 2 + windowScrollX, rect.top + rect.height / 2 + windowScrollY);
        }

        that._pressed = true;

        if (that.clickMode === 'press' || that.clickMode === 'pressAndRelease') {
            that._changeCheckState('pointer');
            that.$.fireEvent('click');
            that.focus();
            that._updateHidenInputNameAndValue();
        }
    }
});
