/**
* ComboBox custom element.
*/
JQX('jqx-combo-box', class ComboBox extends JQX.DropDownList {

    /** 
    * ComboBox's properties 
    */
    static get properties() {
        return {
            'autoComplete': {
                allowedValues: ['none', 'manual', 'auto', 'inline'],
                type: 'string',
                value: 'none'
            },
            'autoCompleteDelay': {
                value: 700,
                type: 'number'
            },
            'escKeyMode': {
                allowedValues: ['none', 'previousValue', 'clearValue'],
                type: 'string',
                value: 'none'
            },
            'minLength': {
                type: 'number',
                value: 2
            },
            'value': {
                value: '',
                type: 'string'
            }
        }
    }

    /**
    * ComboBox's event listeners.
    */
    static get listeners() {
        return {
            'input.focus': '_inputFocusHandler',
            'input.blur': '_inputFocusHandler',
            'input.change': '_inputChangeEventHandler',
            'input.mouseenter': '_buttonsMouseEventsHandler',
            'input.mouseleave': '_buttonsMouseEventsHandler',
            'document.down': '_documentDownHandler',
            'document.up': '_documentUpHandler',
            'document.selectstart': '_selectStartHandler',
            'dropDownButton.down': '_buttonsDownHandler',
            'dropDownButton.mouseenter': '_buttonsMouseEventsHandler',
            'dropDownButton.mouseleave': '_buttonsMouseEventsHandler',
            'keydown': '_keyDownHandler',
            'keyup': '_keyUpHandler',
            'listBox.change': '_listBoxChangeHandler',
            'listBox.keydown': '_listBoxKeyDownHandler',
            'wheel': '_mouseWheelHandler'
        }
    }

    /**
    * ComboBox's HTML template.
    */
    template() {
        return `<div id="container">
                    <span class="jqx-label" id="label">[[label]]</span>
                    <div id="content" class="jqx-content">
                         <div id="selectionField" class ="jqx-selection-field">
                             <input id="input" placeholder="[[placeholder]]"/>
                             <div id="autoCompleteString"></div>
                         </div>
                        <span id="dropDownButton" class ="jqx-drop-down-button jqx-unselectable">
                            <span id="arrow"></span>
                        </span>
                         <div id="dropDownContainer" class="jqx-drop-down jqx-visibility-hidden">
                            <jqx-list-box id="listBox"
                                    unfocusable="true"
                                    data-source="[[dataSource]]"
                                    disabled="[[disabled]]"
                                    display-loading-indicator="[[displayLoadingIndicator]]"
                                    display-member="[[displayMember]]"
                                    filterable="[[filterable]]"
                                    filter-mode="[[filterMode]]"
                                    filter-input-placeholder="[[filterInputPlaceholder]]"
                                    grouped="[[grouped]]"
                                    group-member="[[groupMember]]"
                                    item-height="[[itemHeight]]"
                                    item-template="[[itemTemplate]]"
                                    incremental-search-delay="[[incrementalSearchDelay]]"
                                    incremental-search-mode="[[incrementalSearchMode]]"
                                    loading-indicator-placeholder="[[loadingIndicatorPlaceholder]]"
                                    loading-indicator-position="[[loadingIndicatorPosition]]"
                                    name="[[name]]"
                                    placeholder="[[dropDownPlaceholder]]"
                                    readonly="[[readonly]]"
                                    selected-indexes="{{selectedIndexes}}"
                                    selection-mode="[[selectionMode]]"
                                    selected-values="{{selectedValues}}"
                                    sorted="[[sorted]]"
                                    theme="[[theme]]"
                                    value-member="[[valueMember]]"
                                    virtualized="[[virtualized]]">
                                <content></content>
                            </jqx-list-box>
                            <div id="resizeBar" class="jqx-drop-down-resize-bar">
                                <div></div>
                            </div>
                         </div>
                    </div>
                    <span class="jqx-hint" id="hint">[[hint]]</span>
                </div>`;
    }

    /**
    * Updates the ComboBox when a property is changed.
    * @param {string} propertyName The name of the property.
    * @param {number/string} oldValue The previously entered value. Max, min and value are of type Number. The rest are of type String.
    * @param {number/string} newValue The new entered value. Max, min and value are of type Number. The rest are of type String.
    */
    propertyChangedHandler(propertyName, oldValue, newValue) {
        const that = this;

        switch (propertyName) {
            case 'autoComplete':
                that._autoComplete(true);
                break;
            case 'dataSource':
            case 'displayMember':
                //when selectedValues is 0 and displayMember is changed set actionButton text to default.
                that._clearSelection(true);

                //Check the new listBox size
                that._setDropDownSize();
                that._checkBrowserBounds('vertically');

                if (that.dropDownAppendTo && that.dropDownAppendTo.length > 0) {
                    that._rePositionListBox();
                }

                that._checkBrowserBounds('horizontally');

                //Issue: When changing dataSource from property, the items are not added right away so size isnt calculated properly. Needs a new event or sth...
                //that._setDropDownSize();
                break;
            case 'disabled':
                //Needed, because spans are inserted before the input in advanced selectionDisplayMode and atr syncronization doesn't affect the input.
                that.$.input.disabled = newValue;
                that._setFocusable();
                that.close();
                break;
            case 'readonly':
                //Needed, because spans are inserted before the input in advanced selectionDisplayMode and atr syncronization doesn't affect the input.
                that.$.input.readOnly = newValue;
                that.close();
                break;
            case 'selectedValues':
            case 'selectedIndexes':
                if (newValue.length === 0) {
                    that._clearSelection(true);
                }

                break;
            case 'selectionMode':
            case 'selectionDisplayMode':
                that._applySelectionDisplayMode();
                if (that.selectionDisplayMode === 'tokens') {
                    that._currentSelection = undefined;
                }

                if (propertyName === 'selectionMode') {
                    return;
                }

                that._applySelection(that.selectionMode);
                break;
            case 'tokenTemplate':
                if (that.$.selectionField) {
                    while (that.$.selectionField.firstElementChild.nodeName === 'SPAN') {
                        that.$.selectionField.removeChild(that.$.selectionField.firstElementChild)
                    }
                }

                that._tokenTemplate = that._validateTemplate(that.tokenTemplate);
                that._applySelection();
                break;
            case 'value':
                that._queryItems(true);
                break;
            default:
                super.propertyChangedHandler(propertyName, oldValue, newValue);
                break;
        }
    }

    /**
    * Removes all items from the ComboBox.
    */
    clearItems() {
        const that = this;

        that.$.listBox.clearItems();
        that._clearSelection(true);
    }

    /**
    * Unselects all items.
    */
    clearSelection() {
        const that = this;

        that.$.listBox.clearSelection();
        that._clearSelection(arguments[0] ? false : true);
    }

    /**
    * Sets tab index 
    */
    _setFocusable() {
        const that = this;

        if (!that.disabled && !that.unfocusable) {
            let index = that.tabIndex > 0 ? that.tabIndex : 0;

            that.$.input.tabIndex = index;
            that.dropDownOpenMode === 'dropDownButton' ? that.$.dropDownButton.setAttribute('tabindex', index) : that.$.dropDownButton.removeAttribute('tabindex');
            return;
        }

        that.$.input.tabIndex = -1;
        that.$.dropDownButton.removeAttribute('tabindex');
    }

    /**
     * Handles the autoComplete functionaltiy 
     */
    _autoComplete(noSelectionRefresh) {
        const that = this,
            value = that.$.input.value.length < that.minLength ? '' :
                (that.displayMode === 'escaped' ? that._toDefaultDisplayMode(that.$.input.value) : that.$.input.value), //displayMode is a jqxTextBox property
            isItemFocused = function (items) {
                for (let i = 0; i < items.length; i++) {
                    if (items[i].focused) {
                        return true;
                    }
                }
            };

        let selectedItem;

        if (that.$.listBox.selectedValues.length === 1) {
            selectedItem = that.$.listBox.getItem(that.$.listBox.selectedValues[0]);
        }

        that.$.autoCompleteString.textContent = '';
        that.$.listBox.$.filterInput.value = that.autoComplete === 'none' || that.$.input.value.length < that.minLength ? '' : value;

        const queryCallback = function () {

            if (!that.$.listBox.isAttached || !that.$.input) {
                return;
            }

            that._setDropDownSize();

            if (that.opened) {
                if (that.dropDownAppendTo && that.dropDownAppendTo.length > 0) {
                    that._rePositionListBox();
                }

                that._checkBrowserBounds();
            }

            if (that.$.listBox._filteredItems && that.$.listBox._filteredItems.length > 0) {
                that.$.listBox._scrollView.scrollTop = that.$.listBox._filteredItems[0].offsetTop;

                if (that.autoComplete !== 'none' && that.$.input.value.length >= that.minLength && !isItemFocused(that.$.listBox._filteredItems)) {
                    that._focus(that.$.listBox._filteredItems[0]);
                }

                if (that.autoComplete === 'inline' && that.$.input.value.length >= that.minLength) {
                    that.$.autoCompleteString.style.width = that.$.input.offsetWidth + 'px';
                    that.$.autoCompleteString.style.height = that.$.input.offsetHeight + 'px';
                    that.$.autoCompleteString.style.left = that.$.input.offsetLeft + 'px';
                    that.$.autoCompleteString.style.top = that.$.input.offsetTop + 'px';

                    if (that.$.listBox._filteredItems[0].label.length !== that.$.input.value.length) {
                        that.$.autoCompleteString.textContent = that.$.input.value + that.$.listBox._filteredItems[0].label.slice(that.$.input.value.length);
                    }
                }

                if (selectedItem && selectedItem.label === that.$.listBox._filteredItems[0].label && selectedItem.value === that.$.listBox._filteredItems[0].value) {
                    that.$.listBox.context = that.$.listBox;
                    that.$.listBox._select(that.$.listBox._filteredItems[0], true);
                    that.$.listBox.context = listBoxContext;
                }

                if (value !== that.$.listBox._filteredItems[0].label) {
                    if (that._closedFromKeyCombination) {
                        that._closedFromKeyCombination = false;
                        return;
                    }

                    if (value.length < that.minLength) {
                        that.close();
                        return;
                    }

                    if (that.isCompleted && that.dropDownOpenMode !== 'none') {
                        that.open();
                    }
                }

                return;
            }

            that.close();
        }

        //Context Fix
        let listBoxContext = that.$.listBox.context;

        that.$.listBox.context = that.$.listBox;
        that.$.listBox._filterItems(noSelectionRefresh ? true : false, queryCallback);
        that.$.listBox.context = listBoxContext;

    }

    /**
    * Fills the selection field with the labels selected items.
    */
    _applySelection(mode, details) {
        const that = this;

        function createSelectionTags() {
            while (that.$.selectionField.firstElementChild.nodeName === 'SPAN') {
                that.$.selectionField.removeChild(that.$.selectionField.firstElementChild)
            }

            let fragment = document.createDocumentFragment(), element, icon;

            if (that.selectionDisplayMode === 'tokens') {
                if (that.selectedIndexes.length === 1 && (that.selectionMode === 'oneOrManyExtended' || that.selectionMode === 'oneOrMany')) {
                    icon = '';
                }
                else {
                    icon = '&#10006'
                }
            }
            else {
                icon = ',';
            }

            that.selectedIndexes.map(index => {
                element = that._applyTokenTemplate(that.$.listBox._items[index].label, icon);
                element._value = that.$.listBox._items[index].value;
                fragment.appendChild(element);
            });

            that.$.selectionField.insertBefore(fragment, that.$.input);
            that._currentSelection = that.selectedIndexes.map(i => that.$.listBox._items[i].label);
            that.$.container.setAttribute('has-value', '');
            that._oldValue = that.value = that._currentSelection.toString();

            if (that.opened && that.dropDownAppendTo && that.dropDownAppendTo.length > 0) {
                that._rePositionListBox();
            }
        }

        that.$.autoCompleteString.textContent = '';

        if (that.selectedIndexes.length === 0) {
            that._clearSelection(details && that.$.input.value === details.label);
            return;
        }

        if (!that.$.listBox._items || that.$.listBox._items.length === 0) {
            return;
        }

        if (that.selectionMode === 'one' || that.selectionMode === 'zeroOrOne' || that.selectionMode === 'radioButton') {
            if (that._currentSelection && that._currentSelection.length > that.selectedIndexes.length) {
                that._currentSelection = that.selectedIndexes.map(i => that.$.listBox._items[i].label);
                that.$.input.value = that._currentSelection.toString();
                that._oldValue = that.value = that._currentSelection.toString();
                return;
            }

            that._clearSelection();
            that._currentSelection = that.selectedIndexes.map(i => that.$.listBox._items[i].label);
            that.$.input.value = that._currentSelection.toString();
            that._oldValue = that.value = that._currentSelection.toString();

            that.$.container.setAttribute('has-value', '');

            if (that.autoComplete !== 'none') {
                that._autoComplete(true);
                that.close();
            }
        }
        else {
            that.$.input.value = '';
            that.$.input.placeholder = '';
            that.$.container.setAttribute('has-value', '');

            if (!that._currentSelection || that.selectionMode === 'oneOrManyExtended' || (that.selectionMode === 'radioButton' && !that.grouped)) {
                createSelectionTags();
                return;
            }

            const selectionTags = that.$.selectionField.getElementsByClassName('jqx-token');

            if (that._currentSelection.length < that.selectedIndexes.length) {
                const item = that.$.listBox._items[that.selectedIndexes[that.selectedIndexes.length - 1]];
                let element, icon;

                if (that.selectionDisplayMode === 'tokens') {
                    if (that.selectedIndexes.length === 1 && (that.selectionMode === 'oneOrManyExtended' || that.selectionMode === 'oneOrMany')) {
                        icon = '';
                    }
                    else {
                        icon = '&#10006'
                    }
                }
                else {
                    icon = ',';
                }

                if (that.selectedIndexes.length === 1 && (that.selectionMode === 'oneOrManyExtended' || that.selectionMode === 'oneOrMany')) {
                    icon = '';
                }

                element = that._applyTokenTemplate(item.label, icon);
                element._value = item.value;
                that.$.selectionField.insertBefore(element, that.$.input);

                if (that.autoComplete !== 'none' && (that.$.listBox._filteredItems && that.$.listBox._filteredItems.length !== that.$.listBox._items.length)) {
                    that._autoComplete(true);
                }

                if (that.opened && that.dropDownAppendTo && that.dropDownAppendTo.length > 0) {
                    that._rePositionListBox();
                }
            }
            else if ((that._currentSelection.length > 0 && selectionTags.length === 0) ||
                (that._currentSelection.length === that.selectedIndexes.length && that._currentSelection.toString() !== that.selectedValues.toString())) {
                createSelectionTags();
                return;
            }
            else {
                if (!details) {
                    return;
                }

                for (let t = 0; t < selectionTags.length; t++) {
                    if (selectionTags[t]._value === details.value) {
                        that.$.selectionField.removeChild(selectionTags[t]);
                        break;
                    }
                }
            }

            that._currentSelection = that.selectedIndexes.map(i => that.$.listBox._items[i].label);
            that._oldValue = that.value = that._currentSelection.toString();
        }
    }

    /**
    * Sets the selection mode for the ComboBox.
    */
    _applySelectionDisplayMode() {
        const that = this;

        if (that.selectionMode === 'one' || that.selectionMode === 'zeroOrOne' || that.selectionMode === 'radioButton') {
            that.$.removeClass('auto-height');
        }
        else {
            that.$.addClass('auto-height');
        }
    }

    /**
     * BindingComplete event Handler. When the dataSource or size of listBox is changed.
     */
    _bindingCompleteHandler() {
        const that = this,
            canSelectItem = that.selectionMode === 'one' || that.selectionMode === 'oneOrMany' || that.selectionMode === 'oneOrManyExtended';

        that._queryItems(canSelectItem);
        that._setDropDownSize();
    }

    /**
    * ComboBox container mouse enter/leave events handler.
    */
    _buttonsMouseEventsHandler(event) {
        const that = this;

        if (that.disabled || that.readonly) {
            return;
        }

        if (event.type === 'mouseenter') {
            event.target.$.addClass('hovered');

            if (that.dropDownOpenMode === 'auto') {
                if (event.target === that.$.dropDownButton) {
                    that.open();
                    that.$.input.focus();
                }
                else {
                    that.close();
                }
            }
        }
        else {
            event.target.$.removeClass('hovered');
        }
    }

    /**
    * Initializes the element.
    */
    _createElement() {
        const that = this;

        that._tokenTemplate = that._validateTemplate(that.tokenTemplate);

        //Set properties.
        that._applySelectionDisplayMode();
        that._applySelection(that.selectionMode);

        if (that.autoComplete !== 'none') {
            that._autoComplete(true);
        }

        that._setDropDownSize();
        that.$.input.disabled = that.disabled;
        that.$.input.readOnly = that.readonly;
        that._setFocusable();

        if (that.$.input.value.length > 0 && that.selectedIndexes.length === 0) {
            that.$.container.setAttribute('has-value', '');
            that._oldValue = that.value = that.$.input.value;
        }

        //Flag indicator for the ripple effect. Used to append the ripple to that specific element, not his firstElementChild like it's done usually.
        //Used in class Ripple, method animate() in jqxelement.
        that.$.arrow.noRipple = true;

        if (!that.disabled && that.dropDownPosition === 'auto') {
            // eslint-disable-next-line
            PositionDetection.handleAutoPositioning.call(this, that._scrollHandler, 200, () => { return that.dropDownPosition !== 'auto'; });
        }
    }

    /**
    * Reset the input and clears the selection field.
    */
    _clearSelection(resetInput) {
        const that = this;

        if (resetInput) {
            that.$.input.value = '';
        }

        that.$.input.placeholder = that.placeholder;
        that.$.autoCompleteString.textContent = '';
        that._currentSelection = [];

        if (that.$.selectionField) {
            while (that.$.selectionField.firstElementChild.nodeName === 'SPAN') {
                that.$.selectionField.removeChild(that.$.selectionField.firstElementChild)
            }
        }

        if (that.autoComplete !== 'none' && that.$.input.value.length > 0) {
            if (that._autoCompleteTimer) {
                clearTimeout(that._autoCompleteTimer);
            }

            that._autoCompleteTimer = setTimeout(function () {
                that._autoComplete(true);
            }, that.autoCompleteDelay);
        }

        that.$.container.removeAttribute('has-value');
    }

    /**
    * Document Up handler.
    */
    _documentUpHandler(event) {
        const that = this;
        let target = event.originalEvent.target;

        if (that._resizeDetails && that._resizeDetails.started) {
            that._resizeDetails.started = that._resizeDetails.resizeEventFired = false;
            that.removeAttribute('resizing');
            that._dropDownResized = true;

            that.$.fireEvent('resizeEnd', {
                'position': { left: event.pageX, top: event.pageY }
            });
            return;
        }

        if (that.disabled || that._isListBoxThumbDragged || that.readonly || target === that.$.input) {
            return;
        }

        if (typeof (target) === 'undefined' || target === that.$.resizeBar) {
            return;
        }

        if (target === that.$.selectionField) {
            that.$.input.focus();
            return;
        }

        if (target === that.$.dropDownButton && that.dropDownOpenMode !== 'none') {
            that.$dropDownContainer.hasClass('jqx-visibility-hidden') ? that.open() : that.close();
            that.$.input.focus();
            return;
        }

        if (target.classList.contains('jqx-drop-down-list-selection-label') && target.closest('jqx-combo-box') === that && that.dropDownOpenMode !== 'none') {
            that.open();

            let item = that.$.listBox._items.filter(item => item.label.toString() === target.textContent)[0];

            that.$.input.focus();

            //Scroll to that item and focus it.
            that.$.listBox._scrollView.scrollTop = item.offsetTop;
            that._focus(item);
            return;
        }

        if (target.classList.contains('jqx-drop-down-list-unselect-button') && target.closest('jqx-combo-box') === that) {
            if (that.selectedIndexes.length === 1 && ['zeroOrMany', 'zeroOrOne', 'checkBox'].indexOf(that.selectionMode) < 0) {
                return;
            }

            that.unselect(that.$.listBox._items.filter(item => item.label.toString() === target.previousElementSibling.textContent)[0]);
            that.$.input.focus();
            return;
        }

        while (target) {
            if (target instanceof JQX.ListItem && target.ownerListBox === that.$.listBox) {
                target = 'item';
                break;
            }
            else if (target === that.$.listBox) {
                target = 'listBox';
                break;
            }

            target = target.parentElement;
        }

        if ((!that.$dropDownContainer.hasClass('jqx-visibility-hidden') && target !== 'listBox' && target !== 'item') ||
            (target === 'item' && that.selectionMode.indexOf('Many') < 0) && that.selectionMode !== 'checkBox') {
            that.close();
        }

        if (target === 'item' || (target === 'listBox' && event.originalEvent.target !== that.$.listBox.$.filterInput)) {
            that.$.input.focus();
        }
    }

    /**
    * ComboBox input's focus/blur event handler.
    */
    _inputFocusHandler(event) {
        const that = this;

        if (that.disabled) {
            return;
        }

        if (event.type === 'focus') {
            that.setAttribute('focused', '');
            that._oldValue = that.$.input.value;
        }
        else {
            that.removeAttribute('focused');

            event.target.value !== '' || (that.selectedIndexes.length !== 0 && event.target.value === '') ?
                that.$.container.setAttribute('has-value', '') : that.$.container.removeAttribute('has-value');

            if (!JQX.Utilities.Core.isMobile && !that._preventDropDownClose) {
                that.close();
            }

            if ((that.autoComplete === 'auto' || that.autoComplete === 'inline') && that.$.input.value.length > 0 && that.$.listBox._focusedItem) {
                that.select(that.$.listBox._focusedItem);
            }

            if (that.escKeyMode === 'previousValue') {
                that.value = that.$.input.value;
            }
        }
    }

    /**
     * Input change event handler
     * @param {any} event
     */
    _inputChangeEventHandler(event) {
        const that = this;

        event.stopPropagation();

        that.$.fireEvent('change', {
            'oldValue': that._oldValue,
            'newValue': that.$.input.value,
            'selectedItems': that.selectedItems,
            'selectedValues': that.selectedValues
        });
    }

    /**
    * ComboBox keydown event handler.
    */
    _keyDownHandler(event) {
        const that = this;

        if (that.disabled || that.readonly || event.target === that.$.listBox.$.filterInput) {
            return;
        }

        switch (event.key) {
            case 'Enter':
                if (event.target === that.$.input && that.$.listBox._focusedItem && that.opened) {
                    that.select(that.$.listBox._focusedItem);

                    if (!that.$dropDownContainer.hasClass('jqx-visibility-hidden')) {
                        that.close();
                        that._unfocus();
                    }
                }
                else if (event.target === that.$.dropDownButton) {
                    that.$dropDownButton.addClass('active');
                    that.$dropDownContainer.hasClass('jqx-visibility-hidden') && that.dropDownOpenMode !== 'none' ? that.open() : that.close();
                    that.$.input.focus();
                }

                return;
            case 'Escape':
                if (that._oldValue === that.$.input.value && !that.$dropDownContainer.hasClass('jqx-visibility-hidden')) {
                    that.close();
                    that._unfocus();
                }

                switch (that.escKeyMode) {
                    case 'none':
                        break;
                    case 'clearValue':
                        that.value = that.$.input.value = '';
                        break;
                    case 'previousValue':
                        that.$.input.value = that._oldValue;
                        break;
                }

                break;
                //Messes up the typing inside the input

                //case ' ':
                //    if (that.opened && ['one', 'none'].indexOf(that.selectionMode) < 0) {
                //        that.$.listBox._handleKeyStrokes(event.key);
                //        event.preventDefault();
                //    }

                //    break;
            case 'End':
            case 'Home':
            case 'PageUp':
            case 'PageDown':
            case 'ArrowUp':
            case 'ArrowDown':
                if (event.altKey) {
                    that._closedFromKeyCombination = true;

                    if (that.$dropDownContainer.hasClass('jqx-visibility-hidden') && that.dropDownOpenMode !== 'none') {
                        that.open();

                        if (that.items.length === 0) {
                            return;
                        }

                        if (that.selectedIndexes.length === 0) {
                            that._focus(that.items[0])
                        }
                        else if (that.selectedIndexes.length > 0 && !that.$.listBox._items[that.selectedIndexes[that.selectedIndexes.length - 1]].hidden) {
                            that._focus(that.items[that.selectedIndexes[that.selectedIndexes.length - 1]])
                        }
                    }
                    else {
                        that.close();
                    }

                    return;
                }

                if (event.target === that.$.input && that.$dropDownContainer.hasClass('jqx-visibility-hidden')) {
                    return;
                }

                if (((event.key === 'PageUp' || event.key === 'PageDown') && !that.$.listBox._focusedItem) || event.target === that.$.listBox.$.filterInput) {
                    return;
                }

                event.preventDefault();

                if (!that.$.listBox._focusedItem || (that.$.listBox._focusedItem && !that.$.listBox._focusedItem.focused)) {
                    that._focus(that.items[0]);
                    return;
                }

                that.$.listBox._handleKeyStrokes(event.key);
                break;
            case 'Backspace':
                if (that.$.input.previousElementSibling) {
                    if (that.$.input.value.length === 0) {
                        if (that.selectedIndexes.length === 1 && ['zeroOrMany', 'zeroOrOne', 'checkBox'].indexOf(that.selectionMode) < 0) {
                            return;
                        }

                        that.unselect(that.$.listBox.getItem(that.$.input.previousElementSibling._value));
                    }

                    return;
                }

                if (that.selectedIndexes.length > 1) {
                    that.clearSelection(true);
                }

                break;
            default:
                if (event.target === that.$.input && that.selectionMode === 'oneOrManyExtended') {
                    that.$.listBox._keysPressed[event.key] = true;
                }
        }
    }

    /**
    * ComboBox key up event handler.
    */
    _keyUpHandler(event) {
        const that = this;

        if (that.disabled || (that.escKeyMode === 'none' && event.key === 'Escape') || event.target === that.$.listBox.$.filterInput) {
            return;
        }

        if (event.target === that.$.input && that.selectionMode === 'oneOrManyExtended') {
            that.$.listBox._keysPressed[event.key] = false;
        }

        if (['one', 'radioButton', 'zeroOrOne'].indexOf(that.selectionMode) > -1 && that.selectedIndexes.length === 1 &&
            that.$.input.value !== that._currentSelection[0]) {
            that.unselect(that.$.listBox._items[that.selectedIndexes[0]]);
        }

        if (event.key === 'Enter') {
            that.$dropDownButton.removeClass('active');
            return;
        }

        if (event.target === that.$.input && event.key.indexOf('Arrow') < 0 && ['Control', 'Shift'].indexOf(event.key) < 0) {
            if (that.value === that.$.input.value) {
                return;
            }

            that.value = that._currentSelection.toString() + (that._currentSelection.length > 0 ? ',' : '') + that.$.input.value;

            that.$.autoCompleteString.textContent = '';

            if (that._closedFromKeyCombination) {
                that._closedFromKeyCombination = false;
                return;
            }

            //that._unfocus();

            if (that.autoComplete !== 'none') {
                if (that.$.input.value !== that._currentSelection.toString() || (that.$.listBox._filteredItems && that.$.listBox._filteredItems.length !== that.$.listBox._items.length)) {
                    if (that._autoCompleteTimer) {
                        clearTimeout(that._autoCompleteTimer);
                    }

                    that._autoCompleteTimer = setTimeout(function () {
                        that._autoComplete();
                    }, that.autoCompleteDelay);
                }
            }
            else {
                if (that.$.input.value.length > 0) {
                    that._queryItems();
                }

                if (that.$.listBox._focusedItem) {
                    that.open();

                    if (event.key !== ' ') {
                        that.$.listBox._scrollView.scrollTop = that.$.listBox._focusedItem.offsetTop;
                    }
                }
            }

            if (that.$.listBox._filteredItems && that.$.listBox._filteredItems.length === that.$.listBox._items.length) {
                that.close();
                return;
            }
        }
    }

    /**
    * Mouse wheel event handler.
    */
    _mouseWheelHandler(event) {
        const that = this;

        if (that.disabled || that.readonly || that.items.length === 0) {
            return;
        }

        if (!that.$dropDownContainer.hasClass('jqx-visibility-hidden')) {
            return;
        }

        that.$.listBox._handleKeyStrokes(event.deltaY > 0 ? 'ArrowDown' : 'ArrowUp');
    }

    /**
     * Checks if input's value matches an item from the listBox
     */
    _queryItems(selectItem) {
        const that = this;

        if (!that.value) {
            that.close();
            return;
        }

        let foundItems = that.$.listBox._queryItems(that.$.input.previousElementSibling ? that.$.input.value : that.value, that.incrementalSearchMode);

        if (foundItems.length === 0) {
            that._unfocus();
        }

        for (let i = 0; i < foundItems.length; i++) {
            if (!foundItems[i].hidden) {
                if (selectItem && !foundItems[i].selected) {
                    that.select(foundItems[i]);
                }

                that._focus(foundItems[i]);
                break;
            }
        }

    }

    /**
    * Document select start event handler.
    */
    _selectStartHandler(event) {
        const that = this;

        if (that._resizeDetails && that._resizeDetails.started) {
            event.preventDefault();
        }
    }

    /**
    * Unfocuses the focused list item from the ComboBox.
    */
    _unfocus() {
        const that = this;

        if (!that.$.listBox._focusedItem) {
            return;
        }

        that.$.listBox._focusedItem.focused = false;
        that.$.listBox._focusedItem = undefined;
    }
});