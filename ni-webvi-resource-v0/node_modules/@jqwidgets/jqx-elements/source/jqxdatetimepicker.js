/**
 * DateTimePicker custom element.
 */
JQX('jqx-date-time-picker', class DateTimePicker extends JQX.BaseElement {
    /**
     * DateTimePicker's properties.
     */
    static get properties() {
        return {
            'animationSettings': {
                value: null,
                type: 'object'
            },
            'calendarButton': {
                value: false,
                type: 'boolean'
            },
            'calendarButtonPosition': {
                value: 'right',
                allowedValues: ['left', 'right'],
                type: 'string'
            },
            'calendarMode': {
                value: 'default',
                allowedValues: ['default', 'classic'],
                type: 'string'
            },
            'dayNameFormat': {
                value: 'firstTwoLetters',
                allowedValues: ['narrow', 'firstTwoLetters', 'long', 'short'],
                type: 'string'
            },
            'disableAutoNavigation': {
                value: false,
                type: 'boolean'
            },
            'displayKind': {
                value: 'unspecified',
                allowedValues: ['UTC', 'local', 'unspecified'],
                type: 'string'
            },
            'displayModeView': {
                value: 'table',
                allowedValues: ['table', 'list'],
                type: 'string'
            },
            'dropDownDisplayMode': {
                value: 'default',
                allowedValues: ['default', 'classic', 'calendar', 'timePicker', 'auto'],
                type: 'string'
            },
            'dropDownPosition': {
                value: 'bottom',
                allowedValues: ['bottom', 'overlay-top', 'overlay-center', 'overlay-bottom', 'top', 'center-bottom', 'center-top'],
                type: 'string'
            },
            'editMode': {
                value: 'default',
                allowedValues: ['default', 'full', 'partial'],
                type: 'string'
            },
            'enableMouseWheelAction': {
                value: false,
                type: 'boolean'
            },
            'firstDayOfWeek': {
                value: 0,
                type: 'number'
            },
            'footerTemplate': {
                value: null,
                type: 'any'
            },
            'formatString': {
                value: 'dd-MMM-yy HH:mm:ss.fff',
                type: 'string'
            },
            'headerTemplate': {
                value: null,
                type: 'any'
            },
            'hideDayNames': {
                value: false,
                type: 'boolean'
            },
            'hideOtherMonthDays': {
                value: false,
                type: 'boolean'
            },
            'hideTooltipArrow': {
                value: false,
                type: 'boolean'
            },
            'hint': {
                value: '',
                type: 'string'
            },
            'importantDates': {
                value: [],
                type: 'array'
            },
            'importantDatesTemplate': {
                value: null,
                type: 'any'
            },
            'interval': {
                value: new JQX.Utilities.TimeSpan(0, 0, 1),
                type: 'any'
            },
            'label': {
                value: '',
                type: 'string'
            },
            'max': {
                value: new JQX.Utilities.DateTime(3001, 1, 1),
                type: 'any'
            },
            'messages': {
                value: {
                    'en': {
                        'now': 'Now',
                        'dateTabLabel': 'DATE',
                        'timeTabLabel': 'TIME'
                    }
                },
                type: 'object',
                extend: true
            },
            'min': {
                value: new JQX.Utilities.DateTime(1600, 1, 1),
                type: 'any'
            },
            'name': {
                value: '',
                type: 'string'
            },
            'nullable': {
                value: false,
                type: 'boolean'
            },
            'opened': {
                value: false,
                type: 'boolean'
            },
            'placeholder': {
                value: 'Enter date',
                type: 'string'
            },
            'restrictedDates': {
                value: [],
                type: 'array'
            },
            'spinButtons': {
                value: false,
                type: 'boolean'
            },
            'spinButtonsDelay': {
                value: 75,
                type: 'number'
            },
            'spinButtonsInitialDelay': {
                value: 0,
                type: 'number'
            },
            'spinButtonsPosition': {
                value: 'right',
                allowedValues: ['left', 'right'],
                type: 'string'
            },
            'tooltip': {
                value: false,
                type: 'boolean'
            },
            'tooltipDelay': {
                value: 100,
                type: 'number'
            },
            'tooltipPosition': {
                value: 'top',
                allowedValues: ['bottom', 'top', 'left', 'right', 'absolute'],
                type: 'string'
            },
            'tooltipTemplate': {
                value: null,
                type: 'any'
            },
            'value': {
                defaultReflectToAttribute: true,
                value: new JQX.Utilities.DateTime(),
                type: 'any'
            },
            'weekNumbers': {
                value: false,
                type: 'boolean'
            },
            'weeks': {
                value: 6,
                type: 'number'
            }
        };
    }

    /**
     * DateTimePicker's event listeners.
     */
    static get listeners() {
        return {
            'mouseout': '_mouseoutHandler',
            'mouseover': '_mouseoverHandler',
            'calendarButton.click': '_calendarButtonClickHandler',
            'calendarDropDown.change': '_calendarDropDownChangeHandler',
            'downButton.click': '_spinButtonsClickHandler',
            'input.blur': '_inputBlurHandler',
            'input.change': '_inputChangeHandler',
            'input.dragstart': '_inputDragstartHandler',
            'input.focus': '_inputFocusHandler',
            'input.keydown': '_inputKeydownHandler',
            'input.down': '_inputMousedownHandler',
            'input.paste': '_inputPasteHandler',
            'input.select': '_inputSelectHandler',
            'input.wheel': '_inputWheelHandler',
            'dropDown.keydown': '_dropDownKeydownHandler',
            'dropDown.transitionend': '_dropDownTransitionendHandler',
            'dropDownHeader.click': '_dropDownHeaderClickHandler',
            'upButton.click': '_spinButtonsClickHandler',
            'document.up': '_documentUpHandler'
        };
    }

    /**
     * DateTimePicker's required files.
     */
    static get requires() {
        return {
            'JQX.Utilities.DateTime': 'jqxdate.js',
            'JQX.RepeatButton': 'jqxbutton.js',
            'JQX.Calendar': 'jqxcalendar.js',
            'JQX.TimePicker': 'jqxtimepicker.js'
        }
    }

    /**
     * DateTimePicker's HTML template.
     */
    template() {
        return `<div id="container">
                    <span id="label" class="jqx-label">[[label]]</span>
                    <div id="content" class="jqx-content">
                        <input id="input" class="jqx-date-time-input" type="text" readonly="[[readonly]]" disabled="[[disabled]]" placeholder="[[placeholder]]" name="[[name]]">
                        <div id="spinButtonsContainer" class="jqx-spin-buttons-container">
                            <jqx-repeat-button initial-delay="[[spinButtonsInitialDelay]]" delay="[[spinButtonsDelay]]" readonly="[[readonly]]" unfocusable id="upButton" class="jqx-spin-button">
                                <div class="jqx-arrow jqx-arrow-up"></div>
                            </jqx-repeat-button>
                            <jqx-repeat-button initial-delay="[[spinButtonsInitialDelay]]" delay="[[spinButtonsDelay]]" readonly="[[readonly]]" unfocusable id="downButton" class="jqx-spin-button">
                                <div class="jqx-arrow jqx-arrow-down"></div>
                            </jqx-repeat-button>
                        </div>
                        <div id="calendarButton" class="jqx-calendar-button"></div>
                        <div id="dropDown" class="jqx-date-time-drop-down jqx-visibility-hidden">
                            <div id="dropDownHeader" class="jqx-drop-down-header jqx-hidden">
                                <div id="selectDate" class="jqx-selected"></div>
                                <div id="selectTime"></div>
                            </div>
                            <div id="dropDownContent" class="jqx-drop-down-content">
                                <jqx-calendar id="calendarDropDown" class="jqx-hidden"
                                                animation-settings="[[animationSettings]]"
                                                calendar-mode="[[calendarMode]]"
                                                day-name-format="[[dayNameFormat]]"
                                                disable-auto-navigation="[[disableAutoNavigation]]"
                                                display-mode-view="[[displayModeView]]"
                                                first-day-of-week="[[firstDayOfWeek]]"
                                                header-template="[[headerTemplate]]"
                                                hide-day-names="[[hideDayNames]]"
                                                hide-other-month-days="[[hideOtherMonthDays]]"
                                                hide-tooltip-arrow="[[hideTooltipArrow]]"
                                                important-dates="[[importantDates]]"
                                                important-dates-template="[[importantDatesTemplate]]"
                                                locale="[[locale]]"
                                                selection-mode="one"
                                                spin-buttons-delay="[[spinButtonsDelay]]"
                                                spin-buttons-initial-delay="[[spinButtonsInitialDelay]]"
                                                theme="[[theme]]"
                                                tooltip="[[tooltip]]"
                                                tooltip-delay="[[tooltipDelay]]"
                                                tooltip-position="[[tooltipPosition]]"
                                                tooltip-template="[[tooltipTemplate]]"
                                                unfocusable="[[unfocusable]]"
                                                view-sections='["header", "footer"]'
                                                week-numbers="[[weekNumbers]]"
                                                weeks="[[weeks]]"></jqx-calendar>
                            </div>
                        </div>
                    </div>
                    <span id="hint" class="jqx-hint">[[hint]]</span>
                </div>`;
    }

    /**
     * Called when the element is attached to the DOM.
     */
    attached() {
        const that = this;

        super.attached();

        if (!that.isCompleted) {
            return;
        }

        if (that._defaultFooterTemplateApplied) {
            that._addCalendarFooterListeners();
        }

        if (that.$.timePickerDropDown) {
            that._addTimePickerListener();
        }
    }

    /**
     * Called when the element is detached from the DOM.
     */
    detached() {
        const that = this;

        super.detached();

        if (that._defaultFooterTemplateApplied) {
            const footer = that.$.calendarDropDown.$footer;

            footer.unlisten('change');
            footer.unlisten('click');
            footer.unlisten('wheel');
        }

        if (that.$.timePickerDropDown) {
            that.$.timePickerDropDown.$.unlisten('change');
        }
    }

    /**
     * Called when the element is ready. Used for one-time configuration of the DateTimePicker.
     */
    ready() {
        super.ready();

        const that = this;

        that._edgeMacFF = JQX.Utilities.Core.Browser.Edge ||
            JQX.Utilities.Core.Browser.Firefox && navigator.platform.toLowerCase().indexOf('mac') !== -1;

        if (that._edgeMacFF) {
            that.$dropDown.addClass('not-in-view');
        }

        that._defaultFooterTemplate = document.createElement('template');

        that._defaultFooterTemplate.innerHTML =
            `<div class="jqx-date-time-picker-footer">
                <div class="jqx-footer-component jqx-footer-component-hour">
                    <input type="text" class="jqx-hour-element" />
                    <span class="jqx-year-elements">
                        <jqx-repeat-button class="jqx-increment-year-button" initial-delay="0" delay="75">
                            <span class="jqx-arrow">&#xe801</span>
                        </jqx-repeat-button>
                        <jqx-repeat-button class="jqx-decrement-year-button" initial-delay="0" delay="75">
                            <span class="jqx-arrow">&#xe804</span>
                        </jqx-repeat-button>
                    </span>
                </div>
                <div class="jqx-footer-component jqx-footer-component-minute">
                    <input class="jqx-minute-element" />
                    <span class="jqx-year-elements">
                        <jqx-repeat-button class="jqx-increment-year-button" initial-delay="0" delay="75">
                            <span class="jqx-arrow">&#xe801</span>
                        </jqx-repeat-button>
                        <jqx-repeat-button class="jqx-decrement-year-button" initial-delay="0" delay="75">
                            <span class="jqx-arrow">&#xe804</span>
                        </jqx-repeat-button>
                    </span>
                </div>
                <div class="jqx-footer-component jqx-footer-component-ampm">
                    <input type="text" class="jqx-am-pm-element" />
                </div>
                <div class="jqx-footer-component jqx-footer-component-today">
                    <div class="jqx-today-element" title="Now">&#xe812;</div>
                </div>
            </div>`;

        that._codeToMethod = {
            'y': 'addYears', 'yy': 'addYears', 'yyyy': 'addYears', 'yyyyy': 'addYears',
            'M': 'addMonths', 'MM': 'addMonths', 'MMM': 'addMonths', 'MMMM': 'addMonths',
            'd': 'addDays', 'dd': 'addDays', 'ddd': 'addDays', 'dddd': 'addDays',
            'H': 'addHours', 'HH': 'addHours', 'h': 'addHours', 'hh': 'addHours',
            'm': 'addMinutes', 'mm': 'addMinutes',
            's': 'addSeconds', 'ss': 'addSeconds',
            'f': 'addDeciseconds',
            'ff': 'addCentiseconds',
            'fff': 'addMilliseconds',
            'u': 'addMicroseconds', 'uu': 'addMicroseconds',
            'n': 'addNanoseconds', 'nn': 'addNanoseconds',
            'p': 'addPicoseconds', 'pp': 'addPicoseconds',
            'e': 'addFemtoseconds', 'ee': 'addFemtoseconds',
            'a': 'addAttoseconds', 'aa': 'addAttoseconds',
            'x': 'addZeptoseconds', 'xx': 'addZeptoseconds',
            'o': 'addYoctoseconds', 'oo': 'addYoctoseconds'
        };

        that._codeToIndex = {
            'y': 0, 'yy': 0, 'yyyy': 0, 'yyyyy': 0, 'M': 1, 'MM': 1, 'MMM': 1, 'MMMM': 1, 'd': 2, 'dd': 2, 'ddd': 2, 'dddd': 2,
            'H': 3, 'HH': 3, 'h': 3, 'hh': 3, 'm': 4, 'mm': 4, 's': 5, 'ss': 5, 'f': 6, 'ff': 6, 'fff': 6,
            'u': 7, 'uu': 7, 'n': 8, 'nn': 8, 'p': 9, 'pp': 9, 'e': 10, 'ee': 10,
            'a': 11, 'aa': 11, 'x': 12, 'xx': 12, 'o': 13, 'oo': 13
        };

        that._getLocalizedNames();

        that._validateInitialPropertyValues();

        that._setFocusable();
    }

    /**
     * Closes the calendar dropdown.
     */
    close() {
        const that = this;

        if (!that.opened) {
            return;
        }

        that._close();
    }

    /**
     * Focuses the input.
     */
    focus() {
        this.$.input.focus();
    }

    /**
     * Opens the calendar dropdown.
     */
    open() {
        const that = this;

        if (that.opened) {
            return;
        }

        that._open();
    }

    /**
     * Called when a property is changed.
     */
    propertyChangedHandler(propertyName, oldValue, newValue) {
        super.propertyChangedHandler(propertyName, oldValue, newValue);

        const that = this;

        switch (propertyName) {
            case 'calendarButton':
                that.$.dropDown.style.transition = 'none';

                if (!newValue) {
                    that.close();
                }
                break;
            case 'calendarButtonPosition':
                that.$.dropDown.style.transition = 'none';
                that.close();

                if (newValue === 'left') {
                    that.$.content.insertBefore(that.$.calendarButton, that.$.content.firstElementChild);
                }
                else {
                    that.$.content.insertBefore(that.$.calendarButton, that.$.dropDown);
                }

                break;
            case 'disabled':
                if (newValue) {
                    that.close();
                    that.$.upButton.disabled = true;
                    that.$.downButton.disabled = true;
                }
                else {
                    that._disableSpinButtons();
                }

                that._setFocusable();
                break;
            case 'displayKind': {
                const oldOutputTimeZone = that._outputTimeZone;

                switch (newValue) {
                    case 'unspecified':
                        that._outputTimeZone = that._inputTimeZone;
                        break;
                    case 'UTC':
                        that._outputTimeZone = 'UTC';
                        break;
                    case 'local':
                        that._outputTimeZone = 'Local';
                        break;
                }

                if (that._outputTimeZone === oldOutputTimeZone) {
                    return;
                }

                if (that._value !== null) {
                    that.close();
                    that._toSync = true;

                    that._value = that._value.toTimeZone(that._outputTimeZone);
                    that._applyFormatString();
                }

                that.min = that.min.toTimeZone(that._outputTimeZone);
                that.max = that.max.toTimeZone(that._outputTimeZone);

                for (let i = 0; i < that.restrictedDates.length; i++) {
                    let currentRestrictedDate = that.restrictedDates[i];

                    currentRestrictedDate = currentRestrictedDate.toTimeZone(that._outputTimeZone);
                }

                break;
            }
            case 'dropDownDisplayMode':
                that._changeDropDownDisplayMode();
                break;
            case 'dropDownPosition':
                that.$.dropDown.style.transition = 'none';
                that.close();
                break;
            case 'footerTemplate':
                if (newValue !== null) {
                    that._defaultFooterTemplateApplied = false;

                    const footer = that.$.calendarDropDown.$footer;

                    footer.unlisten('change');
                    footer.unlisten('click');
                    footer.unlisten('wheel');

                    that.$.calendarDropDown.footerTemplate = newValue;
                }
                else {
                    that._setDefaultFooterTemplate();

                    const value = that._value;

                    that._hourElement.value = value.toString('hh');
                    that._minuteElement.value = value.toString('mm');
                    that._ampmElement.value = value.toString('tt');
                }

                break;
            case 'formatString':
                if (newValue === '') {
                    that.formatString = 'dd-MMM-yy HH:mm:ss.fff';
                }

                that._getFormatStringRegExp();
                that._applyFormatString();

                if (that.dropDownDisplayMode === 'auto') {
                    that._changeDropDownDisplayMode();
                }

                break;
            case 'interval':
                that._validateInterval(oldValue);
                break;
            case 'locale':
            case 'messages':
                that.$.selectDate.innerHTML = that.localize('dateTabLabel');
                that.$.selectTime.innerHTML = that.localize('timeTabLabel');

                if (that._defaultFooterTemplateApplied) {
                    that._todayElement.title = that.localize('now');
                }

                if (propertyName === 'messages') {
                    return;
                }

                that._getLocalizedNames();
                that.min.calendar.days = that._localizedDays;
                that.min.calendar.months = that._localizedMonths;
                that.min.calendar.locale = that.locale;
                that.max.calendar.days = that._localizedDays;
                that.max.calendar.months = that._localizedMonths;
                that.max.calendar.locale = that.locale;
                that._value.calendar.days = that._localizedDays;
                that._value.calendar.months = that._localizedMonths;
                that._value.calendar.locale = that.locale;
                that.value.calendar.days = that._localizedDays;
                that.value.calendar.months = that._localizedMonths;
                that.value.calendar.locale = that.locale;

                JQX.Utilities.DateTime.cache = [];
                that._applyFormatString();
                break;
            case 'max':
            case 'min':
                that._validateMinMax(propertyName, oldValue);
                that._validateValue();
                break;
            case 'nullable':
                if (oldValue === true && that._value === null) {
                    that._validateValue(that._now(), null);
                }

                break;
            case 'opened':
                if (newValue) {
                    that._open();
                }
                else {
                    that._close();
                }

                break;
            case 'readonly':
            case 'unfocusable':
                if (newValue) {
                    that.close();
                }

                if (propertyName === 'unfocusable') {
                    that._setFocusable();
                }

                break;
            case 'restrictedDates':
                that._validateRestrictedDates();
                that._validateValue();
                break;
            case 'spinButtonsPosition':
                if (newValue === 'right') {
                    that.$.content.insertBefore(that.$.spinButtonsContainer, that.$.input.nextElementSibling);
                }
                else {
                    that.$.content.insertBefore(that.$.spinButtonsContainer, that.$.input);
                }
                break;
            case 'theme':
                if (that.$.timePickerDropDown) {
                    that.$.timePickerDropDown.theme = newValue;
                }

                break;
            case 'value': {
                let parsedValue;

                if (newValue !== null) {
                    parsedValue = JQX.Utilities.DateTime.validateDate(newValue, that._now(), that.formatString);
                    parsedValue = parsedValue.toTimeZone(that._outputTimeZone);
                }
                else {
                    parsedValue = null;
                }

                that._validateValue(parsedValue, that._value);
                break;
            }
        }
    }

    /**
     * Adds calendar footer listeners.
     */
    _addCalendarFooterListeners() {
        const that = this,
            footer = that.$.calendarDropDown.$footer;

        footer.listen('change', that._footerChangeHandler.bind(that));
        footer.listen('click', that._footerClickHandler.bind(that));
        footer.listen('wheel', that._footerWheelHandler.bind(that));
    }

    /**
     * Adds time picker change event listener.
     */
    _addTimePickerListener() {
        const that = this;

        that.$.timePickerDropDown.$.listen('change', function (event) {
            const oldContext = that.context,
                newTimePickerValue = event.detail.value,
                updatedValueConstructorParameters = JQX.Utilities.DateTime.getConstructorParameters(that._value !== null ? that._value : that._now());

            that.context = that;
            updatedValueConstructorParameters[3] = newTimePickerValue.getHours();
            updatedValueConstructorParameters[4] = newTimePickerValue.getMinutes();
            that._timePickerInitiatedChange = true;
            updatedValueConstructorParameters.unshift(null);
            that._validateValue(new (Function.prototype.bind.apply(JQX.Utilities.DateTime, updatedValueConstructorParameters)));
            that._timePickerInitiatedChange = false;
            that.context = oldContext;
        });
    }

    /**
     * Applies format string.
     */
    _applyFormatString() {
        const that = this;

        that.$.input.value = that._value.toString(that.formatString);
    }

    /**
     * Calendar button click handler.
     */
    _calendarButtonClickHandler(event) {
        const that = this;

        that._highlightedTimePart = undefined;

        if (that.disabled || that.readonly) {
            return;
        }

        if (that.theme.indexOf('material') !== -1) {
            JQX.Utilities.Animation.Ripple.animate(that.$.calendarButton, event.pageX, event.pageY);
        }

        if (that.opened) {
            that._close();
        }
        else {
            that._open();
        }
    }

    /**
     * Calendar dropdown change handler.
     */
    _calendarDropDownChangeHandler(event) {
        const that = this;

        event.stopPropagation();

        if (that._disregardCalendarChangeEvent) {
            that._disregardCalendarChangeEvent = false;
            return;
        }

        if (this.$.calendarDropDown.selectedDates.length > 0) {
            const newCalendarValue = event.detail.value[0],
                oldValue = that._value !== null ? that._value : that._now(),
                updatedValueConstructorParameters = JQX.Utilities.DateTime.getConstructorParameters(oldValue);

            updatedValueConstructorParameters[0] = newCalendarValue.getFullYear();
            updatedValueConstructorParameters[1] = newCalendarValue.getMonth() + 1;
            updatedValueConstructorParameters[2] = newCalendarValue.getDate();
            that._calendarInitiatedChange = true;

            updatedValueConstructorParameters.unshift(null);
            that._validateValue(new (Function.prototype.bind.apply(JQX.Utilities.DateTime, updatedValueConstructorParameters)));

            if (that._defaultFooterTemplateApplied) {
                const value = that._value;

                if (that._hourElement.value === '') {
                    that._hourElement.value = value.toString('hh');
                }

                if (that._ampmElement.value === '') {
                    that._ampmElement.value = value.toString('tt');
                }

                if (that._minuteElement.value === '') {
                    that._minuteElement.value = value.toString('mm');
                }
            }

            that._calendarInitiatedChange = false;
        }
        else {
            that._setNullValue();
        }
    }

    /**
     * Changes dropdown display mode.
     */
    _changeDropDownDisplayMode() {
        function toggleVisibility(dropDownHeader, calendarDropDown, timePickerDropDown, sync) {
            that.$dropDownHeader[dropDownHeader]('jqx-hidden');
            that.$calendarDropDown[calendarDropDown]('jqx-hidden');

            if (that._timePickerInitialized) {
                that.$.timePickerDropDown.$[timePickerDropDown]('jqx-hidden');
            }

            if (sync) {
                if (that.opened) {
                    that.$.calendarDropDown._setTitle();
                }
                else {
                    that._toSync = true;
                }
            }
        }

        const that = this,
            oldDropDownDisplayMode = that._dropDownDisplayMode;

        that._detectDisplayMode();

        if (that._dropDownDisplayMode === oldDropDownDisplayMode) {
            return;
        }

        if (that._dropDownDisplayMode === 'default') {
            that.$.calendarDropDown.viewSections = ['title', 'header'];
            that.$selectDate.addClass('jqx-selected');
            that.$selectTime.removeClass('jqx-selected');
            toggleVisibility('removeClass', 'removeClass', 'addClass', true);
        }
        else if (that._dropDownDisplayMode === 'classic') {
            that.$.calendarDropDown.viewSections = ['header', 'footer'];
            toggleVisibility('addClass', 'removeClass', 'addClass');
        }
        else if (that._dropDownDisplayMode === 'calendar') {
            that.$.calendarDropDown.viewSections = ['title', 'header'];
            toggleVisibility('addClass', 'removeClass', 'addClass', true);
        }
        else {
            toggleVisibility('addClass', 'addClass', 'removeClass');

            if (!that._timePickerInitialized) {
                that._initializeTimePicker();
            }
        }
    }

    /**
     * Clones the value object.
     */
    _cloneValue() {
        const that = this;

        if (that._value !== null) {
            return that._value.clone();
        }
        else {
            return null;
        }
    }

    /**
     * Closes the calendar dropdown.
     */
    _close() {
        const that = this,
            closingEvent = that.$.fireEvent('closing');

        if (!closingEvent.defaultPrevented) {
            that.$.calendarDropDown.disabled = true;

            that.$calendarButton.removeClass('jqx-calendar-button-pressed');
            that.$dropDown.addClass('jqx-visibility-hidden');
            that.opened = false;

            that.$.fireEvent('close');

            if (that._edgeMacFF && !that.$.hasClass('animation')) {
                that.$dropDown.addClass('not-in-view');
            }
        }
        else {
            that.opened = true;
        }
    }

    /**
     * Detects dropdown display mode.
     */
    _detectDisplayMode() {
        const that = this;

        if (that.dropDownDisplayMode !== 'auto') {
            that._dropDownDisplayMode = that.dropDownDisplayMode;
        }
        else {
            const formatString = that.formatString;

            if (this.value.calendar.patterns[formatString]) {
                if (['d', 'D', 'M', 'Y', 'd1', 'd2'].indexOf(formatString) !== -1) {
                    that._dropDownDisplayMode = 'calendar';
                }
                else if (['t', 'T', 'FT', 'PT'].indexOf(formatString) !== -1) {
                    that._dropDownDisplayMode = 'timePicker';
                }
                else {
                    that._dropDownDisplayMode = 'default';
                }
            }
            else {
                const dateParts = ['d', 'M', 'y'],
                    timeParts = ['h', 'H', 'm', 's', 't', 'f', 'u', 'n', 'p', 'e', 'a', 'x', 'o'],
                    groups = that._formatStringRegExp.groups;
                let calendar = false,
                    timePicker = false;

                for (let i = 0; i < groups.length; i++) {
                    const char = groups[i].charAt(0);

                    if (dateParts.indexOf(char) !== -1) {
                        calendar = true;
                    }
                    else if (timeParts.indexOf(char) !== -1) {
                        timePicker = true;
                    }

                    if (calendar && timePicker) {
                        break;
                    }
                }

                if (calendar === timePicker) {
                    that._dropDownDisplayMode = 'default';
                }
                else if (calendar) {
                    that._dropDownDisplayMode = 'calendar';
                }
                else {
                    that._dropDownDisplayMode = 'timePicker';
                }
            }
        }

        if (that._dropDownDisplayMode === 'timePicker') {
            that.$calendarButton.addClass('time');
        }
        else {
            that.$calendarButton.removeClass('time');
        }

        if (that._dropDownDisplayMode === 'default') {
            that.$dropDownContent.removeClass('partial');
        }
        else {
            that.$dropDownContent.addClass('partial');
        }
    }

    /**
     * Disables or enables spin buttons.
     */
    _disableSpinButtons() {
        const that = this;

        if (that.disabled) {
            return;
        }

        const disabled = that._value === null;

        that.$.upButton.disabled = disabled;
        that.$.downButton.disabled = disabled;
    }

    /**
     * Document up handler.
     */
    _documentUpHandler(event) {
        const that = this;

        if (document.activeElement === that.$.input && that.editMode === 'partial' && that._value !== null &&
            (event.originalEvent.target !== that.$.input || that.$.input.selectionStart === that.$.input.selectionEnd)) {
            that._highlightTimePartBasedOnIndex(that._highlightedTimePart.index);
        }
        else {
            if (event.originalEvent.target !== that.$.calendarButton && !that.$.dropDown.contains(event.originalEvent.target)) {
                that.close();

                if (!that.contains(event.originalEvent.target)) {
                    that._highlightedTimePart = undefined;
                }
            }
        }

        that._mouseFocus = false;
    }

    /**
     * Dropdown header click handler
     */
    _dropDownHeaderClickHandler(event) {
        const that = this;

        if (event.target === that.$.selectDate) {
            if (that.$selectDate.hasClass('jqx-selected')) {
                return;
            }

            that.$selectDate.addClass('jqx-selected');
            that.$selectTime.removeClass('jqx-selected');
            that.$.timePickerDropDown.$.addClass('jqx-hidden');
            that.$calendarDropDown.removeClass('jqx-hidden');
        }
        else {
            if (that.$selectTime.hasClass('jqx-selected')) {
                return;
            }

            that.$selectDate.removeClass('jqx-selected');
            that.$selectTime.addClass('jqx-selected');
            that.$calendarDropDown.addClass('jqx-hidden');

            if (that._timePickerInitialized) {
                that.$.timePickerDropDown.$.removeClass('jqx-hidden');
            }
            else {
                that._initializeTimePicker();
            }
        }
    }

    /**
     * Dropdown keydown handler.
     */
    _dropDownKeydownHandler(event) {
        const that = this,
            key = event.key;

        if (that.$.dropDownHeader.contains(document.activeElement) && (key === 'Enter' || key === ' ')) {
            event.preventDefault();
            that._dropDownHeaderClickHandler({ target: document.activeElement });
        }
        else if (key === 'Escape' || event.altKey && key === 'ArrowUp') {
            event.preventDefault();
            that.close();
            that.$.input.focus();
        }
        else if ((key === 'Enter' || key === ' ') && document.activeElement.classList.contains('jqx-footer-component-today')) {
            event.preventDefault();
            that._validateValue(that._now());
        }
    }

    /**
     * Dropdown transitionend handler.
     */
    _dropDownTransitionendHandler() {
        const that = this;

        if (that._edgeMacFF && !that.opened && that.$.hasClass('animation')) {
            that.$dropDown.addClass('not-in-view');
        }
    }

    /**
     * Footer change handler.
     */
    _footerChangeHandler(event) {
        const that = this,
            oldContext = that.context,
            target = event.target,
            dateTimePickerValue = that._value !== null ? that._value : that._now();
        let value = target.value,
            timePartCode;

        that.context = that;

        event.stopPropagation();

        if (target.classList.contains('jqx-hour-element')) {
            value = parseInt(value, 10);

            if (isNaN(value) || value < 0 || value > 12) {
                target.value = dateTimePickerValue.toString('hh');
                return;
            }

            if (value > 0 && value < 12 && dateTimePickerValue.toString('tt') === 'PM') {
                value += 12;
            }

            timePartCode = 'hh';
        }
        else if (target.classList.contains('jqx-minute-element')) {
            value = parseInt(value, 10);

            if (isNaN(value) || value < 0 || value > 59) {
                target.value = dateTimePickerValue.toString('mm');
                return;
            }

            timePartCode = 'mm';
        }
        else {
            if (that._value === null) {
                target.value = '';
                return;
            }

            const oldValue = dateTimePickerValue.toString('tt');

            value = value.toLowerCase();

            if ((oldValue === 'PM' && (value === 'a' || value === 'am')) ||
                (oldValue === 'AM' && (value === 'p' || value === 'pm'))) {
                that._incrementDecrement(undefined, 'tt');
                target.value = that._value.toString('tt');
            }
            else {
                target.value = oldValue;
            }

            return;
        }

        const newValueConstructorParameters = JQX.Utilities.DateTime.getConstructorParameters(dateTimePickerValue);

        newValueConstructorParameters[that._codeToIndex[timePartCode]] = value;
        newValueConstructorParameters.unshift(null);

        that._validateValue(new (Function.prototype.bind.apply(JQX.Utilities.DateTime, newValueConstructorParameters)));

        target.value = that._value.toString(timePartCode);

        that.context = oldContext;
    }

    /**
     * Footer click handler.
     */
    _footerClickHandler(event) {
        const that = this,
            oldContext = that.context,
            target = event.target;

        that.context = that;

        if (target.classList.contains('jqx-today-element')) {
            // "Now" icon is clicked
            that._validateValue(that._now());
        }
        else {
            const closestRepeatButton = target.closest('jqx-repeat-button');

            if (closestRepeatButton !== null) {
                const decrement = closestRepeatButton.$.hasClass('jqx-decrement-year-button'),
                    timePartCode = closestRepeatButton.closest('.jqx-footer-component').classList.contains('jqx-footer-component-hour') ?
                        'hh' : 'mm';

                that._incrementDecrement(decrement, timePartCode);
            }
        }

        that.context = oldContext;
    }

    /**
     * Footer wheel handler.
     */
    _footerWheelHandler(event) {
        const that = this;

        if (that.enableMouseWheelAction && event.target instanceof HTMLInputElement && document.activeElement === event.target) {
            const oldContext = that.context,
                target = event.target;

            that.context = that;

            if (target.classList.contains('jqx-hour-element')) {
                that._incrementDecrement(event.deltaY > 0, 'hh');
            }
            else if (target.classList.contains('jqx-minute-element')) {
                that._incrementDecrement(event.deltaY > 0, 'mm');
            }
            else {
                that._incrementDecrement(undefined, 'tt');
            }

            that.context = oldContext;

            event.stopPropagation();
        }
    }

    /**
     * Gets and highlights a time part.
     */
    _getAndHighlightTimePart(matchIndex, regExpIndex, index) {
        const that = this;

        that._programmaticSelection = true;

        if (that.$.input.selectionStart !== matchIndex || that.$.input.selectionEnd !== regExpIndex) {
            that.$.input.setSelectionRange(matchIndex, regExpIndex);
        }
        else {
            setTimeout(function () {
                that.$.input.setSelectionRange(matchIndex, regExpIndex);
            }, 200);
        }

        that._highlightedTimePart = {
            code: that._formatStringRegExp.groups[index],
            index: index,
            from: matchIndex,
            to: regExpIndex
        };
    }

    /**
     * Gets format string regular expression.
     */
    _getFormatStringRegExp() {
        const that = this;

        that._formatStringRegExp = that.min.getParseRegExp(that.min.calendar, that.formatString.replace(/y+/g, 'yyyyy'));
        that._formatStringRegExp.regExp = new RegExp(that._formatStringRegExp.regExp);
    }

    /**
     * Gets and stores month and day names based on locale.
     */
    _getLocalizedNames() {
        const that = this,
            locale = that.locale,
            days = { names: [], namesAbbr: [], namesShort: [] },
            months = { names: [], namesAbbr: [] };

        for (let i = 23; i < 30; i++) {
            const date = new Date(2017, 6, i),
                name = date.toLocaleString(locale, { 'weekday': 'long' });

            days.names.push(name);
            days.namesAbbr.push(date.toLocaleString(locale, { 'weekday': 'short' }));
            days.namesShort.push(name.substring(0, 2));
        }

        for (let i = 0; i < 12; i++) {
            const date = new Date(2017, i, 1),
                name = date.toLocaleString(locale, { 'month': 'long' });

            months.names.push(name);
            months.namesAbbr.push(name.substring(0, 3));
        }

        months.names.push('');
        months.namesAbbr.push('');

        that._localizedDays = days;
        that._localizedMonths = months;

        that.$.selectDate.innerHTML = that.localize('dateTabLabel');
        that.$.selectTime.innerHTML = that.localize('timeTabLabel');
    }

    /**
     * Handles manual time part edit.
     */
    _handleManualTimePartEdit(newTimePartValue) {
        const that = this,
            newValueConstructorParameters = JQX.Utilities.DateTime.getConstructorParameters(that._value);

        newTimePartValue = newTimePartValue[that._highlightedTimePart.index + 1];

        if (!isNaN(newTimePartValue)) {
            if (that._highlightedTimePart.code === 'f') {
                newTimePartValue = parseInt(newTimePartValue) * 100;
            }
            else if (that._highlightedTimePart.code === 'ff') {
                newTimePartValue = parseInt(newTimePartValue) * 10;
            }
            else if (that._highlightedTimePart.code.indexOf('y') !== -1 && newTimePartValue.length < 3) {
                newTimePartValue = newValueConstructorParameters[0].toString().slice(0, 2) + '0'.repeat(2 - newTimePartValue.length) + newTimePartValue;
            }

            newValueConstructorParameters[that._codeToIndex[that._highlightedTimePart.code]] = parseInt(newTimePartValue, 10);
        }
        else if (that._codeToIndex[that._highlightedTimePart.code] === 1) {
            // month name has been entered
            let index = -1;

            if (newTimePartValue.length > 1) {
                that._localizedMonths.names.some(function (element, i) {
                    if (element.toLowerCase().indexOf(newTimePartValue.toLowerCase()) !== -1) {
                        index = i;
                        return true;
                    }
                });
            }

            if (index !== -1) {
                newValueConstructorParameters[1] = index + 1;
            }
            else {
                that._applyFormatString();
                return;
            }
        }

        try {
            newValueConstructorParameters.unshift(null);
            that._validateValue(new (Function.prototype.bind.apply(JQX.Utilities.DateTime, newValueConstructorParameters)));
        }
        catch (error) {
            that._applyFormatString();
        }
    }

    /**
     * Highlights a time part based on the cursor's position in the input.
     */
    _highlightTimePartBasedOnCursor(caretPosition) {
        const that = this,
            inputValue = that.$.input.value,
            matches = that._formatStringRegExp.regExp.exec(inputValue);

        if (matches === null) {
            that._highlightedTimePart = undefined;
            return;
        }

        let regExpIndex = matches.index,
            matchIndex;

        if (caretPosition === undefined) {
            caretPosition = that.$.input.selectionStart;
        }

        for (let i = 1; i < matches.length; i++) {
            const match = matches[i];

            matchIndex = inputValue.indexOf(match, regExpIndex);
            regExpIndex = matchIndex + match.length;

            if (i === 1 && caretPosition < matchIndex) {
                that._getAndHighlightTimePart(matchIndex, regExpIndex, 0);
                break;
            }

            if (caretPosition >= matchIndex && caretPosition <= regExpIndex) {
                that._getAndHighlightTimePart(matchIndex, regExpIndex, i - 1);
                break;
            }

            const nextMatch = matches[i + 1];

            if (nextMatch) {
                const indexOfNextMatch = inputValue.indexOf(nextMatch, regExpIndex);

                if (caretPosition > regExpIndex && caretPosition < indexOfNextMatch) {
                    if (caretPosition - regExpIndex <= indexOfNextMatch - caretPosition) {
                        that._getAndHighlightTimePart(matchIndex, regExpIndex, i - 1);
                    }
                    else {
                        that._formatStringRegExp.groups[i];
                        that._programmaticSelection = true;
                        that.$.input.setSelectionRange(indexOfNextMatch, indexOfNextMatch + nextMatch.length);
                    }
                    break;
                }
            }
            else {
                that._programmaticSelection = true;
                that.$.input.setSelectionRange(matchIndex, regExpIndex);
                that._highlightedTimePart = {
                    code: that._formatStringRegExp.groups[i - 1],
                    index: i - 1,
                    from: matchIndex,
                    to: regExpIndex
                };
                break;
            }
        }
    }

    /**
     * Highlights a time part based on its index in the format string.
     */
    _highlightTimePartBasedOnIndex(index) {
        const that = this,
            inputValue = that.$.input.value,
            matches = that._formatStringRegExp.regExp.exec(inputValue);
        let regExpIndex = matches.index,
            matchIndex;

        if (index < 0 || index >= matches.length) {
            return;
        }

        if (that.$.input !== document.activeElement) {
            that.$.input.focus();
        }

        for (let i = 1; i < matches.length; i++) {
            const match = matches[i];

            matchIndex = inputValue.indexOf(match, regExpIndex);
            regExpIndex = matchIndex + match.length;

            if (index === i - 1) {
                that._getAndHighlightTimePart(matchIndex, regExpIndex, index);
                break;
            }
        }
    }

    /**
     * Increments or decrements the value.
     */
    _incrementDecrement(decrement, timePartCode) {
        const that = this,
            oldValue = that._cloneValue();

        if (timePartCode === undefined && that._highlightedTimePart) {
            timePartCode = that._highlightedTimePart.code;
        }

        if (timePartCode !== undefined) {
            if (timePartCode === 'z' || timePartCode === 'zz' || timePartCode === 'zzz') {
                that._highlightTimePartBasedOnIndex(that._highlightedTimePart.index);
                return;
            }

            if (timePartCode === 't' || timePartCode === 'tt') {
                that._value = that._value.addHours(that._value.hour() < 12 ? 12 : -12, true);
            }
            else {
                that._value = that._value[that._codeToMethod[timePartCode]](decrement ? -1 : 1, true);
            }

            that._validateValue(undefined, oldValue, false);

            if (that._highlightedTimePart) {
                that._highlightTimePartBasedOnIndex(that._highlightedTimePart.index);
            }
        }
        else {
            that._value = that._value.add(decrement ? that.interval.negate() : that.interval, undefined, true);
            that._validateValue(undefined, oldValue, false);
        }

        if (oldValue.compare(that._value) !== 0) {
            that.$.fireEvent('change', { 'oldValue': oldValue.toTimeZone(that._inputTimeZone), 'value': that.value });
        }
    }

    /**
     * Initializes TimePicker instance.
     */
    _initializeTimePicker() {
        const that = this;

        const timePickerDropDown = document.createElement('jqx-time-picker');

        timePickerDropDown.theme = that.theme;
        timePickerDropDown.value = that._value !== null ? that._value.toDate() : that._now();
        that.$.timePickerDropDown = timePickerDropDown;
        timePickerDropDown.$ = JQX.Utilities.Extend(timePickerDropDown);
        that.$.dropDownContent.appendChild(timePickerDropDown);
        that._timePickerInitialized = true;

        that._addTimePickerListener();
    }

    /**
     * Input blur handler.
     */
    _inputBlurHandler() {
        const that = this;

        that.removeAttribute('focused');
        that._fullEdit = false;
        that._highlightedTimePartEdit = false;
    }

    /**
     * Input change handler.
     */
    _inputChangeHandler(event) {
        const that = this;

        if (event) {
            event.stopPropagation();
        }

        if (that.$.input.value === '') {
            that._setNullValue();
            return;
        }

        if (that._fullEdit || that._value === null) {
            that._fullEdit = false;
            that._validateValue(that.$.input.value);
        }
        else if (that._highlightedTimePartEdit) {
            that._highlightedTimePartEdit = false;

            let newTimePartValue = that._formatStringRegExp.regExp.exec(that.$.input.value);

            if (newTimePartValue !== null) {
                that._handleManualTimePartEdit(newTimePartValue);
            }
            else {
                that._applyFormatString();
            }
        }
    }

    /**
     * Input dragstart handler.
     */
    _inputDragstartHandler(event) {
        event.preventDefault();
    }

    /**
     * Input focus handler.
     */
    _inputFocusHandler() {
        const that = this;

        that.setAttribute('focused', '');

        if (that.editMode !== 'full') {
            // Timeout is necessary due to an issue in Chrome (https://bugs.chromium.org/p/chromium/issues/detail?id=526516)
            setTimeout(function () {
                if (that._mouseFocus !== true) {
                    if (that._highlightedTimePart === undefined) {
                        that._highlightTimePartBasedOnCursor(0);
                    }
                    else {
                        that._highlightTimePartBasedOnIndex(that._highlightedTimePart.index);
                    }
                }
            }, 0);
        }
    }

    /**
     * Input keydown handler.
     */
    _inputKeydownHandler(event) {
        const that = this,
            editMode = that.editMode,
            key = event.key;

        if (key === 'Tab') {
            return;
        }

        if (event.altKey && key === 'ArrowDown') {
            event.preventDefault();
            that.open();
            return;
        }

        if (key === 'Escape' || event.altKey && key === 'ArrowUp') {
            event.preventDefault();
            that.close();
            return;
        }

        if (editMode === 'full') {
            that._fullEdit = true;
            return;
        }
        else if (editMode === 'partial') {
            if (key === 'Delete') {
                if (that._value !== null) {
                    that._setNullValue();
                    event.preventDefault();
                }

                return;
            }

            if (that._value === null) {
                that._validateValue(that._now(), null, false);
                that._highlightTimePartBasedOnIndex(0);
            }

            if (['/', '.', '-', ',', ' '].indexOf(key) !== -1) {
                that._inputChangeHandler();
                that._navigateToNextTimePart();
                event.preventDefault();
                return;
            }
            else if (key === 'Backspace') {
                that._resetTimePart();

                if (that._highlightedTimePart.index > 0) {
                    that._navigateToPreviousTimePart();
                }
                else {
                    that._highlightTimePartBasedOnIndex(0);
                }

                event.preventDefault();
                return;
            }
        }
        else if (that._fullEdit || that._highlightedTimePartEdit || that.readonly ||
            ['Alt', 'Control', 'Shift'].indexOf(key) !== -1 ||
            event.altKey || event.ctrlKey) {
            return;
        }

        if (['End', 'Home', 'ArrowLeft', 'ArrowUp', 'ArrowRight', 'ArrowDown'].indexOf(key) === -1) {
            if (that._highlightedTimePart) {
                if (editMode !== 'partial' &&
                    (that._highlightedTimePart.to - that._highlightedTimePart.from !==
                        that.$.input.selectionEnd - that.$.input.selectionStart)) {

                    that._fullEdit = true;
                    return;
                }

                const code = that._highlightedTimePart.code;

                if (code === 'ddd' || code === 'dddd' ||
                    code === 'z' || code === 'zz' || code === 'zzz' ||
                    code === 't' || code === 'tt') {
                    // weekday name, time zone offset and a.m./p.m. cannot be edited
                    event.preventDefault();
                    return;
                }
                else if (editMode === 'partial' &&
                    code !== 'MMM' && code !== 'MMMM' &&
                    new RegExp(/^\d+$/).test(key) === false) {
                    if (key.length < 2 || key.charAt(0) !== 'F') {
                        event.preventDefault();
                    }

                    return;
                }

                that._highlightedTimePartEdit = true;
            }

            return;
        }

        event.preventDefault();

        if (editMode === 'partial' && that._highlightedTimePartEdit) {
            that._inputChangeHandler();
        }

        if (that._value === null) {
            return;
        }

        switch (key) {
            case 'End':
                that._highlightTimePartBasedOnIndex(that._formatStringRegExp.groups.length - 1);
                break;
            case 'Home':
                that._highlightTimePartBasedOnIndex(0);
                break;
            case 'ArrowLeft':
                that._navigateToPreviousTimePart();
                break;
            case 'ArrowUp':
                that._incrementDecrement();
                break;
            case 'ArrowRight':
                that._navigateToNextTimePart();
                break;
            case 'ArrowDown':
                that._incrementDecrement(true);
                break;
        }
    }

    /**
     * Input mousedown handler.
     */
    _inputMousedownHandler() {
        const that = this;

        if (that._fullEdit || that._highlightedTimePartEdit || that.editMode === 'full') {
            return;
        }

        // Timeout is necessary due to an issue in Chrome (https://bugs.chromium.org/p/chromium/issues/detail?id=526516)
        setTimeout(function () {
            that._mouseFocus = true;
            that._highlightTimePartBasedOnCursor();
        }, 0);
    }

    /**
     * Input paste handler.
     */
    _inputPasteHandler(event) {
        const that = this;

        if (that.editMode === 'partial') {
            event.preventDefault();
        }
        else {
            this._fullEdit = true;
        }
    }

    /**
     * Input select handler.
     */
    _inputSelectHandler() {
        const that = this;

        if (that.editMode !== 'partial') {
            return;
        }

        if (that._programmaticSelection === true) {
            that._programmaticSelection = false;
        }
        else {
            if (that._highlightedTimePart) {
                that._highlightTimePartBasedOnIndex(that._highlightedTimePart.index);
            }
            else {
                that._highlightTimePartBasedOnIndex(0);
            }
        }
    }

    /**
     * Input wheel handler.
     */
    _inputWheelHandler(event) {
        const that = this;

        if (document.activeElement === that.$.input && that.enableMouseWheelAction && !that.disabled && !that.readonly) {
            event.preventDefault();
            that._incrementDecrement(event.deltaY > 0);
        }
    }

    /**
     * Checks if a date is restricted.
     */
    _isRestricted(date) {
        const restrictedDates = this.restrictedDates;
        let isRestricted = false;

        for (let i = 0; i < restrictedDates.length; i++) {
            if (date.equalDateParts(restrictedDates[i])) {
                isRestricted = true;
                break;
            }
        }

        return isRestricted;
    }

    /**
     * Mouseout handler.
     */
    _mouseoutHandler(event) {
        const that = this;

        if (!that.disabled && (event.target === that.$.input || event.target === that.$.calendarButton)) {
            event.target.$.removeClass('hover');
        }
    }

    /**
     * Mouseover handler.
     */
    _mouseoverHandler(event) {
        const that = this;

        if (!that.disabled && (event.target === that.$.input || event.target === that.$.calendarButton)) {
            event.target.$.addClass('hover');
        }
    }

    /**
     * Navigates to next time part (if any).
     */
    _navigateToNextTimePart() {
        const that = this;

        that._highlightTimePartBasedOnIndex(that._highlightedTimePart.index + 1);
    }

    /**
     * Navigates to previous time part (if any).
     */
    _navigateToPreviousTimePart() {
        const that = this;

        that._highlightTimePartBasedOnIndex(that._highlightedTimePart.index - 1);
    }

    /**
     * Returns a new DateTime object with the current time.
     */
    _now() {
        const that = this,
            now = new JQX.Utilities.DateTime('today', 'Local');

        if (that._outputTimeZone !== 'Local') {
            return now.toTimeZone(that._outputTimeZone);
        }

        return now;
    }

    /**
     * Opens the calendar dropdown.
     */
    _open() {
        const that = this;

        if (that.disabled || that.readonly) {
            that.opened = false;
            return;
        }

        const openingEvent = that.$.fireEvent('opening');

        if (!openingEvent.defaultPrevented) {
            if (that._edgeMacFF) {
                that.$dropDown.removeClass('not-in-view');
            }

            that.$.dropDown.style.transition = '';
            that.$.calendarDropDown.disabled = false;

            that.$calendarButton.addClass('jqx-calendar-button-pressed');

            if (that._dropDownDisplayMode !== 'default' && that._dropDownDisplayMode !== 'timePicker' ||
                !that._timePickerInitialized || (that._timePickerInitialized && that.$.timePickerDropDown.$.hasClass('jqx-hidden'))) {
                that.$calendarDropDown.removeClass('jqx-hidden');
            }

            that.$dropDown.removeClass('jqx-visibility-hidden');
            that.opened = true;

            that.$.fireEvent('open');

            if (that._toSync) {
                const value = that._value;

                if (value !== null) {
                    that._disregardCalendarChangeEvent = true;
                    that.$.calendarDropDown.selectedDates = [value.toDate()];

                    if (that._defaultFooterTemplateApplied) {
                        that._hourElement.value = value.toString('hh');
                        that._minuteElement.value = value.toString('mm');
                        that._ampmElement.value = value.toString('tt');
                    }

                    if (that._timePickerInitialized) {
                        that.$.timePickerDropDown.value = value.toDate();
                    }
                }
                else {
                    const oldContext = that.$.calendarDropDown.context;

                    that.$.calendarDropDown.context = that.$.calendarDropDown;
                    that.$.calendarDropDown._clearSelection(true);
                    that.$.calendarDropDown.context = oldContext;

                    if (that._defaultFooterTemplateApplied) {
                        that._hourElement.value = '';
                        that._minuteElement.value = '';
                        that._ampmElement.value = '';
                    }
                }

                that._toSync = false;
            }

            switch (that._dropDownDisplayMode) {
                case 'default':
                    that.$.selectDate.focus();
                    break;
                case 'classic':
                case 'calendar':
                    that.$.calendarDropDown.focus();
                    break;
                case 'timePicker':
                    that.$.timePickerDropDown.$.picker.focus();
                    break;
            }
        }
        else {
            that.opened = false;
        }
    }

    /**
     * Returns a date in the range between "min" and "max"
     */
    _rangeValidation(initialDate) {
        const that = this;

        if (initialDate.compare(that.min) === -1) {
            return that.min.clone();
        }
        else if (initialDate.compare(that.max) === 1) {
            return that.max.clone();
        }
        else {
            return initialDate;
        }
    }

    /**
     * Resets a time part
     */
    _resetTimePart() {
        const that = this,
            code = that._highlightedTimePart.code,
            index = that._codeToIndex[code],
            newValueConstructorParameters = JQX.Utilities.DateTime.getConstructorParameters(that._value);
        let value;

        if (index > 2) {
            value = 0;
        }
        else if (index > 0) {
            value = 1;
        }
        else {
            value = that.min.year();
        }

        newValueConstructorParameters[index] = value;
        newValueConstructorParameters.unshift(null);

        that._validateValue(new (Function.prototype.bind.apply(JQX.Utilities.DateTime, newValueConstructorParameters)));
    }

    /**
     * Sets default footer template
     */
    _setDefaultFooterTemplate(initialization) {
        const that = this;

        that.$.calendarDropDown.footerTemplate = that._defaultFooterTemplate;

        if (initialization) {
            that.$.calendarDropDown._handleLayoutTemplate(that.$.calendarDropDown.$.footer, that._defaultFooterTemplate);
        }

        that._hourElement = that.$.calendarDropDown.getElementsByClassName('jqx-hour-element')[0];
        that._minuteElement = that.$.calendarDropDown.getElementsByClassName('jqx-minute-element')[0];
        that._ampmElement = that.$.calendarDropDown.getElementsByClassName('jqx-am-pm-element')[0];
        that._todayElement = that.$.calendarDropDown.getElementsByClassName('jqx-today-element')[0];
        that._todayElement.title = that.localize('now');

        that._addCalendarFooterListeners();

        that._defaultFooterTemplateApplied = true;
    }

    /**
     * Sets whether the element can be focused.
     */
    _setFocusable() {
        const that = this;

        if (that.disabled || that.unfocusable) {
            that.$.input.tabIndex = -1;
            that.$.selectDate.removeAttribute('tabindex');
            that.$.selectTime.removeAttribute('tabindex');

            if (that._defaultFooterTemplateApplied) {
                that._hourElement.tabIndex = -1;
                that._ampmElement.tabIndex = -1;
                that._minuteElement.tabIndex = -1;
                that.$.calendarDropDown.getElementsByClassName('jqx-increment-year-button')[0].tabIndex = -1;
                that.$.calendarDropDown.getElementsByClassName('jqx-increment-year-button')[1].tabIndex = -1;
                that.$.calendarDropDown.getElementsByClassName('jqx-decrement-year-button')[0].tabIndex = -1;
                that.$.calendarDropDown.getElementsByClassName('jqx-decrement-year-button')[1].tabIndex = -1;
                that.$.calendarDropDown.getElementsByClassName('jqx-footer-component-today')[0].tabIndex = -1;
            }

            return;
        }

        const index = that.tabIndex > 0 ? that.tabIndex : 0;

        that.$.input.removeAttribute('tabindex');
        that.$.selectDate.tabIndex = index;
        that.$.selectTime.tabIndex = index;

        if (that._defaultFooterTemplateApplied) {
            that._hourElement.removeAttribute('tabindex');
            that._ampmElement.removeAttribute('tabindex');
            that._minuteElement.removeAttribute('tabindex');
            that.$.calendarDropDown.getElementsByClassName('jqx-increment-year-button')[0].removeAttribute('tabindex');
            that.$.calendarDropDown.getElementsByClassName('jqx-increment-year-button')[1].removeAttribute('tabindex');
            that.$.calendarDropDown.getElementsByClassName('jqx-decrement-year-button')[0].removeAttribute('tabindex');
            that.$.calendarDropDown.getElementsByClassName('jqx-decrement-year-button')[1].removeAttribute('tabindex');
            that.$.calendarDropDown.getElementsByClassName('jqx-footer-component-today')[0].tabIndex = index;
        }
    }

    /**
     * Sets the value to null and updates the input.
     */
    _setNullValue(oldValue) {
        const that = this;

        if (oldValue === undefined) {
            oldValue = that._cloneValue();
        }

        if (that.nullable) {
            that._value = null;
            that.value = null;
            that._highlightedTimePart = undefined;

            that.$.input.value = '';

            if (oldValue !== null) {
                if (that.opened) {
                    if (!that._calendarInitiatedChange) {
                        const oldContext = that.$.calendarDropDown.context;

                        that.$.calendarDropDown.context = that.$.calendarDropDown;
                        that.$.calendarDropDown._clearSelection(true);
                        that.$.calendarDropDown.context = oldContext;
                    }

                    if (that._defaultFooterTemplateApplied) {
                        that._hourElement.value = '';
                        that._ampmElement.value = '';
                        that._minuteElement.value = '';
                    }

                    that._toSync = false;
                }
                else {
                    that._toSync = true;
                }

                that.$.fireEvent('change', { 'oldValue': oldValue.toTimeZone(that._inputTimeZone), 'value': null });
            }

            that._disableSpinButtons();
        }
        else {
            that._validateValue(that._now(), oldValue);
        }
    }

    /**
     * Spin buttons click handler.
     */
    _spinButtonsClickHandler(event) {
        const that = this;

        if (that._value !== null && !that.disabled && !that.readonly) {
            that._incrementDecrement(event.target === that.$.downButton ? true : false);
        }
    }

    /**
     * Validates initial property values.
     */
    _validateInitialPropertyValues() {
        const that = this,
            calendar = that.$.calendarDropDown;

        if (that.calendarButtonPosition === 'left') {
            that.$.content.insertBefore(that.$.calendarButton, that.$.input);
        }

        if (that.spinButtonsPosition === 'left') {
            that.$.content.insertBefore(that.$.spinButtonsContainer, that.$.input);
        }

        if (that.disabled) {
            that.$.upButton.disabled = true;
            that.$.downButton.disabled = true;
        }

        if (that.opened) {
            if (!that.disabled && !that.readonly) {
                calendar.disabled = false;
                that.$calendarButton.addClass('jqx-calendar-button-pressed');
                that.$calendarDropDown.removeClass('jqx-hidden');
                that.$dropDown.removeClass('jqx-visibility-hidden');
            }
            else {
                that.opened = false;
            }
        }

        if (that.footerTemplate === null) {
            that._setDefaultFooterTemplate(true);
        }
        else {
            calendar.footerTemplate = that.footerTemplate;
            calendar._handleLayoutTemplate(calendar.$.footer, that.footerTemplate);
        }

        if (that.formatString === '') {
            that.formatString = 'dd-MMM-yy HH:mm:ss.fff';
        }

        const displayKind = that.displayKind;

        if (displayKind === 'UTC') {
            that._outputTimeZone = 'UTC';
        }
        else if (displayKind === 'local') {
            that._outputTimeZone = 'Local';
        }

        let parsedValue;

        if (that.value !== null) {
            parsedValue = JQX.Utilities.DateTime.validateDate(that.value, new JQX.Utilities.DateTime(), that.formatString);
            that._inputTimeZone = parsedValue.timeZone;

            if (displayKind !== 'unspecified' && that._inputTimeZone !== that._outputTimeZone) {
                parsedValue = parsedValue.toTimeZone(that._outputTimeZone);
            }
            else if (displayKind === 'unspecified') {
                that._outputTimeZone = that._inputTimeZone;
            }
        }
        else {
            parsedValue = null;
            that._inputTimeZone = 'Local';
        }

        that._validateRestrictedDates();
        that._validateMinMax('both');
        that._validateValue(parsedValue, that._now(), false);
        that._validateInterval(new JQX.Utilities.TimeSpan(0, 0, 1));

        that._getFormatStringRegExp();

        if (that._defaultFooterTemplateApplied && that._hourElement.value === '' && that.value !== null) {
            const value = that.value;

            that._hourElement.value = value.toString('hh');
            that._ampmElement.value = value.toString('tt');
            that._minuteElement.value = value.toString('mm');
        }

        that._detectDisplayMode();

        const dropDownDisplayMode = that._dropDownDisplayMode;

        if (dropDownDisplayMode === 'default' || dropDownDisplayMode === 'calendar') {
            calendar.viewSections = ['title', 'header'];

            if (calendar.$title.hasClass('jqx-hidden')) {
                calendar.propertyChangedHandler('viewSections', ['header', 'footer'], ['title', 'header']);
            }

            if (dropDownDisplayMode === 'default') {
                that.$dropDownHeader.removeClass('jqx-hidden');
            }
        }
        else if (dropDownDisplayMode === 'timePicker') {
            that.$calendarDropDown.addClass('jqx-hidden');
            that._initializeTimePicker();
        }
    }

    /**
     * Validates "interval"
     */
    _validateInterval(referenceValue) {
        const that = this,
            interval = that.interval;
        let validValue = interval;

        if (interval instanceof JQX.Utilities.TimeSpan) {
            validValue = interval;
        }
        else if (typeof interval === 'string') {
            const indexOfTimeSpan = interval.indexOf('TimeSpan('),
                indexOfBracket = interval.indexOf(')');

            if (indexOfTimeSpan !== -1 && indexOfBracket !== -1) {
                validValue = interval.slice(indexOfTimeSpan + 9, indexOfBracket);

                validValue = validValue.replace(/'/g, '').replace(/"/g, '').replace(/^\s+|\s+$|\s+(?=\s)/g, '');

                if (new RegExp(/(^(\d+)(,\s*\d+)*$)/g).test(validValue)) {
                    validValue = validValue.replace(/\s/g, '');
                    validValue = validValue.split(',');

                    validValue.map(function (argument, index) {
                        validValue[index] = parseInt(argument);
                    });

                    validValue.unshift(null);
                    validValue = new (Function.prototype.bind.apply(JQX.Utilities.TimeSpan, validValue));
                }
            }

            if (validValue instanceof JQX.Utilities.TimeSpan === false) {
                if (validValue.trim() === '') {
                    that.interval = referenceValue;
                    return;
                }

                if (!isNaN(validValue)) {
                    validValue = parseInt(validValue, 10) * 10000;
                }

                try {
                    validValue = new JQX.Utilities.TimeSpan(validValue);
                }
                catch (error) {
                    that.interval = referenceValue;
                    return;
                }
            }
        }
        else if (typeof interval === 'number') {
            validValue = new JQX.Utilities.TimeSpan(interval);
        }
        else {
            that.interval = referenceValue;
            return;
        }

        if (validValue._ticks === 0) {
            that.interval = referenceValue;
        }
        else {
            that.interval = validValue;
        }
    }

    /**
     * Validates "min" and "max"
     */
    _validateMinMax(which, referenceValue) {
        const that = this;
        let minChanged = false;

        if (which !== 'max') {
            that.min = JQX.Utilities.DateTime.validateDate(that.min, referenceValue || new JQX.Utilities.DateTime(1600, 1, 1), that.formatString);
            that.min = that.min.toTimeZone(that._outputTimeZone);
            minChanged = true;
        }

        if (which !== 'min') {
            that.max = JQX.Utilities.DateTime.validateDate(that.max, referenceValue || new JQX.Utilities.DateTime(3001, 1, 1), that.formatString);
            that.max = that.max.toTimeZone(that._outputTimeZone);

            that.max.calendar.days = that._localizedDays;
            that.max.calendar.months = that._localizedMonths;
            that.max.calendar.locale = that.locale;

            that.$.calendarDropDown.max = that.max.toDate();
        }

        if (that.min.compare(that.max) > 0) {
            that.min = that.max.clone();
            minChanged = true;
        }

        if (minChanged) {
            that.min.calendar.days = that._localizedDays;
            that.min.calendar.months = that._localizedMonths;
            that.min.calendar.locale = that.locale;

            that.$.calendarDropDown.min = that.min.toDate();
        }
    }

    /**
     * Validates "restrictedDates".
     */
    _validateRestrictedDates() {
        const that = this,
            dateTimeInputRestrictedDates = [],
            calendarRestrictedDates = [];

        for (let i = 0; i < that.restrictedDates.length; i++) {
            const currentRestrictedDate = that.restrictedDates[i];
            let validRestrictedDate = JQX.Utilities.DateTime.validateDate(currentRestrictedDate, 'invalid', that.formatString);

            if (validRestrictedDate !== 'invalid') {
                validRestrictedDate = validRestrictedDate.toTimeZone(that._outputTimeZone);
                dateTimeInputRestrictedDates.push(validRestrictedDate);
                calendarRestrictedDates.push(validRestrictedDate.toDate());
            }
        }

        that.restrictedDates = dateTimeInputRestrictedDates;
        that.$.calendarDropDown.restrictedDates = calendarRestrictedDates;
    }

    /**
     * Validates the value and updates the input.
     */
    _validateValue(value, referenceValue, fireEvent) {
        const that = this,
            oldValue = referenceValue !== undefined ? referenceValue : that._cloneValue();

        if (value === null || value === '') {
            that._setNullValue(oldValue);
            return;
        }

        if (value !== undefined) {
            that._value = JQX.Utilities.DateTime.validateDate(value, oldValue, that.formatString);
        }

        if (that._value === null) {
            that._setNullValue(oldValue);
            return;
        }

        let valueNotRestricted = that._value;

        while (that._isRestricted(valueNotRestricted) === true) {
            valueNotRestricted.addDays(1, false);
        }

        that._value = that._rangeValidation(valueNotRestricted);

        that.value = that._value.toTimeZone(that._inputTimeZone);

        const validValue = that._value;

        validValue.calendar.days = that._localizedDays;
        validValue.calendar.months = that._localizedMonths;
        validValue.calendar.locale = that.locale;

        that._applyFormatString();
        that._disableSpinButtons();

        if (((oldValue === null || validValue === null) && oldValue !== validValue) ||
            ((oldValue !== null && validValue !== null) && oldValue.compare(validValue) !== 0)) {
            if (fireEvent !== false) {
                that.$.fireEvent('change', { 'oldValue': oldValue !== null ? oldValue.toTimeZone(that._inputTimeZone) : null, 'value': that.value });
            }

            if (that._calendarInitiatedChange) {
                return;
            }

            if (that.opened) {
                if (oldValue === null ||
                    that.$.calendarDropDown.selectedDates.length === 0 ||
                    oldValue.year() !== validValue.year() ||
                    oldValue.month() !== validValue.month() ||
                    oldValue.day() !== validValue.day()) {
                    that._disregardCalendarChangeEvent = true;
                    that.$.calendarDropDown.selectedDates = [validValue.toDate()];
                }

                if (that._defaultFooterTemplateApplied) {
                    if (oldValue === null || oldValue.hour() !== validValue.hour()) {
                        that._hourElement.value = validValue.toString('hh');
                        that._ampmElement.value = validValue.toString('tt');
                    }

                    if (oldValue === null || oldValue.minute() !== validValue.minute()) {
                        that._minuteElement.value = validValue.toString('mm');
                    }
                }

                if (that._timePickerInitialized && !that._timePickerInitiatedChange) {
                    that.$.timePickerDropDown.value = validValue.toDate();
                }

                that._toSync = false;
            }
            else {
                that._toSync = true;
            }
        }
    }
});
