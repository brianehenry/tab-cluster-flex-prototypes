/**
* ScrollBar custom element.
*/
JQX('jqx-scroll-bar', class ScrollBar extends JQX.BaseElement {
    // ScrollBar's properties.
    static get properties() {
        return {
            'largeStep': {
                type: 'integer',
                value: 100
            },
            'min': {
                type: 'integer',
                value: 0
            },
            'max': {
                type: 'integer',
                value: 1000
            },
            'orientation': {
                type: 'string',
                value: 'horizontal',
                allowedValues: ['horizontal', 'vertical']
            },
            'step': {
                type: 'integer',
                value: 10
            },
            'value': {
                type: 'integer',
                value: 0
            }
        };
    }

    /** ScrollBar's template. */
    template() {
        const template =
            `<div id="container" class="jqx-container">
                    <jqx-repeat-button tabindex="-1" focusable="false" disabled="[[disabled]]" id="nearButton" class ="jqx-scroll-button">
                        <div id="nearArrow" class="jqx-arrow"></div>
                    </jqx-repeat-button>
                    <div  id="track" class="jqx-track">
                        <div id="thumb" class="jqx-thumb"></div>
                    </div>
                    <jqx-repeat-button tabindex="-1" disabled="[[disabled]]" id="farButton" class ="jqx-scroll-button">
                        <div id="farArrow" class="jqx-arrow"></div>
                    </jqx-repeat-button>
            </div>`;

        return template;
    }

    static get listeners() {
        return {
            'nearButton.click': '_nearButtonClickHandler',
            'farButton.click': '_farButtonClickHandler',
            'track.down': '_trackDownHandler',
            'track.click': '_trackClickHandler',
            'thumb.down': '_dragStartHandler',
            'document.move': '_dragHandler',
            'document.up': '_dragEndHandler',
            'document.selectstart': '_selectStartHandler',
            'resize': '_resizeHandler'
        };
    }

    _calculateThumbSize(scrollAreaSize) {
        const that = this;
        const positions = that.max - that.min;
        const enoughSpace = that.orientation === 'horizontal' ?
            that.$.track.offsetWidth > 10 : that.$.track.offsetHeight > 10;
        let size = 0;

        if (positions >= 1 && enoughSpace) {
            size = (scrollAreaSize / (positions + scrollAreaSize) * scrollAreaSize);

            if (that.$.thumb.className.indexOf('jqx-hidden') >= 0) {
                that.$thumb.removeClass('jqx-hidden');
            }
        }
        else {
            that.$thumb.addClass('jqx-hidden');
        }

        return Math.max(10, Math.min(size, scrollAreaSize));
    }

    _dragStartHandler(event) {
        const that = this;

        if (that.disabled) {
            return;
        }

        that.thumbCapture = true;
        that.dragStartX = event.clientX;
        that.dragStartY = event.clientY;
        that.dragStartValue = that.value;

        if (event.originalEvent) {
            event.originalEvent.stopPropagation();
            event.originalEvent.preventDefault();
        }
    }

    _dragHandler(event) {
        const that = this;

        if (that.thumbCapture !== true) {
            return;
        }

        const ratio = (that.max - that.min) / (that.scrollBarSize - that.thumbSize);
        const offsetValue = that.orientation === 'horizontal' ? (event.clientX - that.dragStartX) * ratio : (event.clientY - that.dragStartY) * ratio;
        let step = offsetValue;

        if (that.rightToLeft && that.orientation === 'horizontal') {
            step = -offsetValue;
        }
        that._updateValue(that.dragStartValue + step);

        if (event.originalEvent) {
            event.originalEvent.stopPropagation();
            event.originalEvent.preventDefault();
        }
    }

    _dragEndHandler() {
        const that = this;

        if (that._trackDownTimer) {
            clearInterval(that._trackDownTimer);
            that._trackDownTimer = null;
        }

        if (!that.thumbCapture) {
            return;
        }

        that.thumbCapture = false;
    }

    _farButtonClickHandler() {
        const that = this;

        if (that.disabled) {
            return;
        }

        that._updateValue(that.value + that.step);
    }

    _nearButtonClickHandler() {
        const that = this;

        if (that.disabled) {
            return;
        }

        that._updateValue(that.value - that.step);
    }

    propertyChangedHandler(propertyName, oldValue, newValue) {
        super.propertyChangedHandler(propertyName, oldValue, newValue);

        const that = this;

        switch (propertyName) {
            case 'min':
            case 'max':
            case 'orientation': {
                that._layout();
                break;
            }
            case 'value':
                that._updateValue(oldValue, newValue);
                break;
        }
    }

    ready() {
        super.ready();

        const that = this;

        that._layout();
    }

    _resizeHandler() {
        const that = this;

        that._layout();
    }

    refresh() {
        const that = this;

        that._layout();
    }

    _layout() {
        const that = this;

        that.scrollBarSize = that.orientation === 'horizontal' ? that.$.track.offsetWidth : that.$.track.offsetHeight;
        that.thumbSize = that._calculateThumbSize(that.scrollBarSize);

        that.$.thumb.removeAttribute('style');

        if (that.orientation === 'horizontal') {
            that.$.thumb.style.width = that.thumbSize + 'px';
        }
        else {
            that.$.thumb.style.height = that.thumbSize + 'px';
        }

        that.$nearArrow.removeClass('jqx-arrow-left jqx-arrow-up');
        that.$farArrow.removeClass('jqx-arrow-right jqx-arrow-down');

        if (that.orientation === 'horizontal') {
            that.$nearArrow.addClass('jqx-arrow-left');
            that.$farArrow.addClass('jqx-arrow-right');
        }
        else {
            that.$nearArrow.addClass('jqx-arrow-up');
            that.$farArrow.addClass('jqx-arrow-down');
        }

        that._updateThumbPosition();

        if (that.value > that.max || that.value < that.min) {
            that._updateValue(that.value, that.value > that.max ? that.max : that.min);
        }
    }

    _selectStartHandler(event) {
        const that = this;

        if (that.thumbCapture) {
            event.preventDefault();
        }
    }

    _trackDownHandler(event) {
        const that = this;

        if (event.target !== that.$.track) {
            return;
        }

        that._trackDownTimer = setInterval(function () {
            that._trackClickHandler(event);
        }, 50);
    }

    _trackClickHandler(event) {
        const that = this;

        if (that.disabled || (event.target !== that.$.track)) {
            return;
        }

        const thumbRect = that.$.thumb.getBoundingClientRect();
        const x = event.pageX - window.pageXOffset;
        const y = event.pageY - window.pageYOffset;

        if (that.orientation === 'horizontal') {
            if (x > thumbRect.right) {
                that._updateValue(that.value + that.largeStep);
            }
            else if (x < thumbRect.left) {
                that._updateValue(that.value - that.largeStep);
            }
        }
        else {
            if (y > thumbRect.bottom) {
                that._updateValue(that.value + that.largeStep);
            }
            else if (y < thumbRect.top) {
                that._updateValue(that.value - that.largeStep);
            }
        }
    }

    _updateValue(oldValue, newValue) {
        const that = this;

        if (arguments.length === 1) {
            newValue = oldValue;
            oldValue = that.value;
        }

        if (newValue === undefined || isNaN(newValue)) {
            newValue = that.min;
        }

        if (newValue > that.max) {
            newValue = that.max;
        }

        if (newValue < that.min) {
            newValue = that.min;
        }

        if (oldValue !== newValue) {
            that.value = newValue;
            that._updateThumbPosition();

            that.$.fireEvent('change', { 'value': that.value, 'oldValue': oldValue });
        }
    }

    _updateThumbPosition() {
        const that = this;

        let height = that.$.track.offsetHeight;
        let width = that.$.track.offsetWidth;

        const scrollBarSize = (that.orientation === 'horizontal') ? width : height;
        const thumbSize = that._calculateThumbSize(scrollBarSize);
        const maxThumbPosition = (that.orientation === 'horizontal') ? width - thumbSize : height - thumbSize;

        let thumbPosition = (scrollBarSize - thumbSize) / (that.max - that.min) * (that.value - that.min);

        if (that.rightToLeft && that.orientation === 'horizontal') {
            thumbPosition = (scrollBarSize - thumbSize) / (that.max - that.min) * (that.max - that.value - that.min);
        }

        thumbPosition = Math.min(maxThumbPosition, Math.max(0, thumbPosition));

        if (that.orientation === 'vertical') {
            that.$.thumb.style.top = thumbPosition + 'px';
        }
        else {
            that.$.thumb.style.left = thumbPosition + 'px';
        }
    }
});


